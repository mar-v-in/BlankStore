// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Purchase.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class BuyResponse extends Message {

  public static final String DEFAULT_CONTINUEVIAURL = "";
  public static final String DEFAULT_PURCHASESTATUSURL = "";
  public static final String DEFAULT_CHECKOUTSERVICEID = "";
  public static final Boolean DEFAULT_CHECKOUTTOKENREQUIRED = false;
  public static final String DEFAULT_BASECHECKOUTURL = "";
  public static final List<String> DEFAULT_TOSCHECKBOXHTML = Collections.emptyList();
  public static final Integer DEFAULT_IABPERMISSIONERROR = 0;
  public static final String DEFAULT_PURCHASECOOKIE = "";

  @ProtoField(tag = 1)
  public final PurchaseNotificationResponse purchaseResponse;

  @ProtoField(tag = 2)
  public final CheckoutInfoProto CheckoutInfo;

  @ProtoField(tag = 8, type = STRING)
  public final String continueViaUrl;

  @ProtoField(tag = 9, type = STRING)
  public final String purchaseStatusUrl;

  @ProtoField(tag = 12, type = STRING)
  public final String checkoutServiceId;

  @ProtoField(tag = 13, type = BOOL)
  public final Boolean checkoutTokenRequired;

  @ProtoField(tag = 14, type = STRING)
  public final String baseCheckoutUrl;

  @ProtoField(tag = 37, type = STRING, label = REPEATED)
  public final List<String> tosCheckboxHtml;

  @ProtoField(tag = 38, type = INT32)
  public final Integer iabPermissionError;

  @ProtoField(tag = 39)
  public final PurchaseStatusResponse purchaseStatusResponse;

  @ProtoField(tag = 46, type = STRING)
  public final String purchaseCookie;

  @ProtoField(tag = 49)
  public final Challenge challenge;

  public BuyResponse(PurchaseNotificationResponse purchaseResponse, CheckoutInfoProto CheckoutInfo, String continueViaUrl, String purchaseStatusUrl, String checkoutServiceId, Boolean checkoutTokenRequired, String baseCheckoutUrl, List<String> tosCheckboxHtml, Integer iabPermissionError, PurchaseStatusResponse purchaseStatusResponse, String purchaseCookie, Challenge challenge) {
    this.purchaseResponse = purchaseResponse;
    this.CheckoutInfo = CheckoutInfo;
    this.continueViaUrl = continueViaUrl;
    this.purchaseStatusUrl = purchaseStatusUrl;
    this.checkoutServiceId = checkoutServiceId;
    this.checkoutTokenRequired = checkoutTokenRequired;
    this.baseCheckoutUrl = baseCheckoutUrl;
    this.tosCheckboxHtml = immutableCopyOf(tosCheckboxHtml);
    this.iabPermissionError = iabPermissionError;
    this.purchaseStatusResponse = purchaseStatusResponse;
    this.purchaseCookie = purchaseCookie;
    this.challenge = challenge;
  }

  private BuyResponse(Builder builder) {
    this(builder.purchaseResponse, builder.CheckoutInfo, builder.continueViaUrl, builder.purchaseStatusUrl, builder.checkoutServiceId, builder.checkoutTokenRequired, builder.baseCheckoutUrl, builder.tosCheckboxHtml, builder.iabPermissionError, builder.purchaseStatusResponse, builder.purchaseCookie, builder.challenge);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BuyResponse)) return false;
    BuyResponse o = (BuyResponse) other;
    return equals(purchaseResponse, o.purchaseResponse)
        && equals(CheckoutInfo, o.CheckoutInfo)
        && equals(continueViaUrl, o.continueViaUrl)
        && equals(purchaseStatusUrl, o.purchaseStatusUrl)
        && equals(checkoutServiceId, o.checkoutServiceId)
        && equals(checkoutTokenRequired, o.checkoutTokenRequired)
        && equals(baseCheckoutUrl, o.baseCheckoutUrl)
        && equals(tosCheckboxHtml, o.tosCheckboxHtml)
        && equals(iabPermissionError, o.iabPermissionError)
        && equals(purchaseStatusResponse, o.purchaseStatusResponse)
        && equals(purchaseCookie, o.purchaseCookie)
        && equals(challenge, o.challenge);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = purchaseResponse != null ? purchaseResponse.hashCode() : 0;
      result = result * 37 + (CheckoutInfo != null ? CheckoutInfo.hashCode() : 0);
      result = result * 37 + (continueViaUrl != null ? continueViaUrl.hashCode() : 0);
      result = result * 37 + (purchaseStatusUrl != null ? purchaseStatusUrl.hashCode() : 0);
      result = result * 37 + (checkoutServiceId != null ? checkoutServiceId.hashCode() : 0);
      result = result * 37 + (checkoutTokenRequired != null ? checkoutTokenRequired.hashCode() : 0);
      result = result * 37 + (baseCheckoutUrl != null ? baseCheckoutUrl.hashCode() : 0);
      result = result * 37 + (tosCheckboxHtml != null ? tosCheckboxHtml.hashCode() : 1);
      result = result * 37 + (iabPermissionError != null ? iabPermissionError.hashCode() : 0);
      result = result * 37 + (purchaseStatusResponse != null ? purchaseStatusResponse.hashCode() : 0);
      result = result * 37 + (purchaseCookie != null ? purchaseCookie.hashCode() : 0);
      result = result * 37 + (challenge != null ? challenge.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<BuyResponse> {

    public PurchaseNotificationResponse purchaseResponse;
    public CheckoutInfoProto CheckoutInfo;
    public String continueViaUrl;
    public String purchaseStatusUrl;
    public String checkoutServiceId;
    public Boolean checkoutTokenRequired;
    public String baseCheckoutUrl;
    public List<String> tosCheckboxHtml;
    public Integer iabPermissionError;
    public PurchaseStatusResponse purchaseStatusResponse;
    public String purchaseCookie;
    public Challenge challenge;

    public Builder() {
    }

    public Builder(BuyResponse message) {
      super(message);
      if (message == null) return;
      this.purchaseResponse = message.purchaseResponse;
      this.CheckoutInfo = message.CheckoutInfo;
      this.continueViaUrl = message.continueViaUrl;
      this.purchaseStatusUrl = message.purchaseStatusUrl;
      this.checkoutServiceId = message.checkoutServiceId;
      this.checkoutTokenRequired = message.checkoutTokenRequired;
      this.baseCheckoutUrl = message.baseCheckoutUrl;
      this.tosCheckboxHtml = copyOf(message.tosCheckboxHtml);
      this.iabPermissionError = message.iabPermissionError;
      this.purchaseStatusResponse = message.purchaseStatusResponse;
      this.purchaseCookie = message.purchaseCookie;
      this.challenge = message.challenge;
    }

    public Builder purchaseResponse(PurchaseNotificationResponse purchaseResponse) {
      this.purchaseResponse = purchaseResponse;
      return this;
    }

    public Builder CheckoutInfo(CheckoutInfoProto CheckoutInfo) {
      this.CheckoutInfo = CheckoutInfo;
      return this;
    }

    public Builder continueViaUrl(String continueViaUrl) {
      this.continueViaUrl = continueViaUrl;
      return this;
    }

    public Builder purchaseStatusUrl(String purchaseStatusUrl) {
      this.purchaseStatusUrl = purchaseStatusUrl;
      return this;
    }

    public Builder checkoutServiceId(String checkoutServiceId) {
      this.checkoutServiceId = checkoutServiceId;
      return this;
    }

    public Builder checkoutTokenRequired(Boolean checkoutTokenRequired) {
      this.checkoutTokenRequired = checkoutTokenRequired;
      return this;
    }

    public Builder baseCheckoutUrl(String baseCheckoutUrl) {
      this.baseCheckoutUrl = baseCheckoutUrl;
      return this;
    }

    public Builder tosCheckboxHtml(List<String> tosCheckboxHtml) {
      this.tosCheckboxHtml = checkForNulls(tosCheckboxHtml);
      return this;
    }

    public Builder iabPermissionError(Integer iabPermissionError) {
      this.iabPermissionError = iabPermissionError;
      return this;
    }

    public Builder purchaseStatusResponse(PurchaseStatusResponse purchaseStatusResponse) {
      this.purchaseStatusResponse = purchaseStatusResponse;
      return this;
    }

    public Builder purchaseCookie(String purchaseCookie) {
      this.purchaseCookie = purchaseCookie;
      return this;
    }

    public Builder challenge(Challenge challenge) {
      this.challenge = challenge;
      return this;
    }

    @Override
    public BuyResponse build() {
      return new BuyResponse(this);
    }
  }
}
