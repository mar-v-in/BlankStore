// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Asset.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.STRING;

public final class PackageDependencyProto extends Message {

  public static final String DEFAULT_PACKAGENAME = "";
  public static final Boolean DEFAULT_SKIPPERMISSIONS = false;

  @ProtoField(tag = 41, type = STRING)
  public final String packageName;

  @ProtoField(tag = 42, type = BOOL)
  public final Boolean skipPermissions;

  public PackageDependencyProto(String packageName, Boolean skipPermissions) {
    this.packageName = packageName;
    this.skipPermissions = skipPermissions;
  }

  private PackageDependencyProto(Builder builder) {
    this(builder.packageName, builder.skipPermissions);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PackageDependencyProto)) return false;
    PackageDependencyProto o = (PackageDependencyProto) other;
    return equals(packageName, o.packageName)
        && equals(skipPermissions, o.skipPermissions);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = packageName != null ? packageName.hashCode() : 0;
      result = result * 37 + (skipPermissions != null ? skipPermissions.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<PackageDependencyProto> {

    public String packageName;
    public Boolean skipPermissions;

    public Builder() {
    }

    public Builder(PackageDependencyProto message) {
      super(message);
      if (message == null) return;
      this.packageName = message.packageName;
      this.skipPermissions = message.skipPermissions;
    }

    public Builder packageName(String packageName) {
      this.packageName = packageName;
      return this;
    }

    public Builder skipPermissions(Boolean skipPermissions) {
      this.skipPermissions = skipPermissions;
      return this;
    }

    @Override
    public PackageDependencyProto build() {
      return new PackageDependencyProto(this);
    }
  }
}
