// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Documents.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;

public final class TranslatedText extends Message {

  public static final String DEFAULT_TEXT = "";
  public static final String DEFAULT_SOURCELOCALE = "";
  public static final String DEFAULT_TARGETLOCALE = "";

  @ProtoField(tag = 1, type = STRING)
  public final String text;

  @ProtoField(tag = 2, type = STRING)
  public final String sourceLocale;

  @ProtoField(tag = 3, type = STRING)
  public final String targetLocale;

  public TranslatedText(String text, String sourceLocale, String targetLocale) {
    this.text = text;
    this.sourceLocale = sourceLocale;
    this.targetLocale = targetLocale;
  }

  private TranslatedText(Builder builder) {
    this(builder.text, builder.sourceLocale, builder.targetLocale);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TranslatedText)) return false;
    TranslatedText o = (TranslatedText) other;
    return equals(text, o.text)
        && equals(sourceLocale, o.sourceLocale)
        && equals(targetLocale, o.targetLocale);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = text != null ? text.hashCode() : 0;
      result = result * 37 + (sourceLocale != null ? sourceLocale.hashCode() : 0);
      result = result * 37 + (targetLocale != null ? targetLocale.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TranslatedText> {

    public String text;
    public String sourceLocale;
    public String targetLocale;

    public Builder() {
    }

    public Builder(TranslatedText message) {
      super(message);
      if (message == null) return;
      this.text = message.text;
      this.sourceLocale = message.sourceLocale;
      this.targetLocale = message.targetLocale;
    }

    public Builder text(String text) {
      this.text = text;
      return this;
    }

    public Builder sourceLocale(String sourceLocale) {
      this.sourceLocale = sourceLocale;
      return this;
    }

    public Builder targetLocale(String targetLocale) {
      this.targetLocale = targetLocale;
      return this;
    }

    @Override
    public TranslatedText build() {
      return new TranslatedText(this);
    }
  }
}
