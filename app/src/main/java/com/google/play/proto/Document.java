// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Documents.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class Document extends Message {

  public static final String DEFAULT_TITLE = "";
  public static final String DEFAULT_URL = "";
  public static final List<String> DEFAULT_SNIPPET = Collections.emptyList();
  public static final List<Image> DEFAULT_IMAGE = Collections.emptyList();
  public static final List<Document> DEFAULT_CHILD = Collections.emptyList();
  public static final List<Offer> DEFAULT_OFFER = Collections.emptyList();
  public static final List<TranslatedText> DEFAULT_TRANSLATEDSNIPPET = Collections.emptyList();
  public static final List<DocumentVariant> DEFAULT_DOCUMENTVARIANT = Collections.emptyList();
  public static final List<String> DEFAULT_CATEGORYID = Collections.emptyList();
  public static final List<Document> DEFAULT_DECORATION = Collections.emptyList();
  public static final List<Document> DEFAULT_PARENT = Collections.emptyList();
  public static final String DEFAULT_PRIVACYPOLICYURL = "";

  @ProtoField(tag = 1)
  public final Docid docid;

  @ProtoField(tag = 2)
  public final Docid fetchDocid;

  @ProtoField(tag = 3)
  public final Docid sampleDocid;

  @ProtoField(tag = 4, type = STRING)
  public final String title;

  @ProtoField(tag = 5, type = STRING)
  public final String url;

  @ProtoField(tag = 6, type = STRING, label = REPEATED)
  public final List<String> snippet;

  @ProtoField(tag = 7)
  public final Offer priceDeprecated;

  @ProtoField(tag = 9)
  public final Availability availability;

  @ProtoField(tag = 10, label = REPEATED)
  public final List<Image> image;

  @ProtoField(tag = 11, label = REPEATED)
  public final List<Document> child;

  @ProtoField(tag = 13)
  public final AggregateRating aggregateRating;

  @ProtoField(tag = 14, label = REPEATED)
  public final List<Offer> offer;

  @ProtoField(tag = 15, label = REPEATED)
  public final List<TranslatedText> translatedSnippet;

  @ProtoField(tag = 16, label = REPEATED)
  public final List<DocumentVariant> documentVariant;

  @ProtoField(tag = 17, type = STRING, label = REPEATED)
  public final List<String> categoryId;

  @ProtoField(tag = 18, label = REPEATED)
  public final List<Document> decoration;

  @ProtoField(tag = 19, label = REPEATED)
  public final List<Document> parent;

  @ProtoField(tag = 20, type = STRING)
  public final String privacyPolicyUrl;

  public Document(Docid docid, Docid fetchDocid, Docid sampleDocid, String title, String url, List<String> snippet, Offer priceDeprecated, Availability availability, List<Image> image, List<Document> child, AggregateRating aggregateRating, List<Offer> offer, List<TranslatedText> translatedSnippet, List<DocumentVariant> documentVariant, List<String> categoryId, List<Document> decoration, List<Document> parent, String privacyPolicyUrl) {
    this.docid = docid;
    this.fetchDocid = fetchDocid;
    this.sampleDocid = sampleDocid;
    this.title = title;
    this.url = url;
    this.snippet = immutableCopyOf(snippet);
    this.priceDeprecated = priceDeprecated;
    this.availability = availability;
    this.image = immutableCopyOf(image);
    this.child = immutableCopyOf(child);
    this.aggregateRating = aggregateRating;
    this.offer = immutableCopyOf(offer);
    this.translatedSnippet = immutableCopyOf(translatedSnippet);
    this.documentVariant = immutableCopyOf(documentVariant);
    this.categoryId = immutableCopyOf(categoryId);
    this.decoration = immutableCopyOf(decoration);
    this.parent = immutableCopyOf(parent);
    this.privacyPolicyUrl = privacyPolicyUrl;
  }

  private Document(Builder builder) {
    this(builder.docid, builder.fetchDocid, builder.sampleDocid, builder.title, builder.url, builder.snippet, builder.priceDeprecated, builder.availability, builder.image, builder.child, builder.aggregateRating, builder.offer, builder.translatedSnippet, builder.documentVariant, builder.categoryId, builder.decoration, builder.parent, builder.privacyPolicyUrl);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Document)) return false;
    Document o = (Document) other;
    return equals(docid, o.docid)
        && equals(fetchDocid, o.fetchDocid)
        && equals(sampleDocid, o.sampleDocid)
        && equals(title, o.title)
        && equals(url, o.url)
        && equals(snippet, o.snippet)
        && equals(priceDeprecated, o.priceDeprecated)
        && equals(availability, o.availability)
        && equals(image, o.image)
        && equals(child, o.child)
        && equals(aggregateRating, o.aggregateRating)
        && equals(offer, o.offer)
        && equals(translatedSnippet, o.translatedSnippet)
        && equals(documentVariant, o.documentVariant)
        && equals(categoryId, o.categoryId)
        && equals(decoration, o.decoration)
        && equals(parent, o.parent)
        && equals(privacyPolicyUrl, o.privacyPolicyUrl);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = docid != null ? docid.hashCode() : 0;
      result = result * 37 + (fetchDocid != null ? fetchDocid.hashCode() : 0);
      result = result * 37 + (sampleDocid != null ? sampleDocid.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (snippet != null ? snippet.hashCode() : 1);
      result = result * 37 + (priceDeprecated != null ? priceDeprecated.hashCode() : 0);
      result = result * 37 + (availability != null ? availability.hashCode() : 0);
      result = result * 37 + (image != null ? image.hashCode() : 1);
      result = result * 37 + (child != null ? child.hashCode() : 1);
      result = result * 37 + (aggregateRating != null ? aggregateRating.hashCode() : 0);
      result = result * 37 + (offer != null ? offer.hashCode() : 1);
      result = result * 37 + (translatedSnippet != null ? translatedSnippet.hashCode() : 1);
      result = result * 37 + (documentVariant != null ? documentVariant.hashCode() : 1);
      result = result * 37 + (categoryId != null ? categoryId.hashCode() : 1);
      result = result * 37 + (decoration != null ? decoration.hashCode() : 1);
      result = result * 37 + (parent != null ? parent.hashCode() : 1);
      result = result * 37 + (privacyPolicyUrl != null ? privacyPolicyUrl.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Document> {

    public Docid docid;
    public Docid fetchDocid;
    public Docid sampleDocid;
    public String title;
    public String url;
    public List<String> snippet;
    public Offer priceDeprecated;
    public Availability availability;
    public List<Image> image;
    public List<Document> child;
    public AggregateRating aggregateRating;
    public List<Offer> offer;
    public List<TranslatedText> translatedSnippet;
    public List<DocumentVariant> documentVariant;
    public List<String> categoryId;
    public List<Document> decoration;
    public List<Document> parent;
    public String privacyPolicyUrl;

    public Builder() {
    }

    public Builder(Document message) {
      super(message);
      if (message == null) return;
      this.docid = message.docid;
      this.fetchDocid = message.fetchDocid;
      this.sampleDocid = message.sampleDocid;
      this.title = message.title;
      this.url = message.url;
      this.snippet = copyOf(message.snippet);
      this.priceDeprecated = message.priceDeprecated;
      this.availability = message.availability;
      this.image = copyOf(message.image);
      this.child = copyOf(message.child);
      this.aggregateRating = message.aggregateRating;
      this.offer = copyOf(message.offer);
      this.translatedSnippet = copyOf(message.translatedSnippet);
      this.documentVariant = copyOf(message.documentVariant);
      this.categoryId = copyOf(message.categoryId);
      this.decoration = copyOf(message.decoration);
      this.parent = copyOf(message.parent);
      this.privacyPolicyUrl = message.privacyPolicyUrl;
    }

    public Builder docid(Docid docid) {
      this.docid = docid;
      return this;
    }

    public Builder fetchDocid(Docid fetchDocid) {
      this.fetchDocid = fetchDocid;
      return this;
    }

    public Builder sampleDocid(Docid sampleDocid) {
      this.sampleDocid = sampleDocid;
      return this;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder url(String url) {
      this.url = url;
      return this;
    }

    public Builder snippet(List<String> snippet) {
      this.snippet = checkForNulls(snippet);
      return this;
    }

    public Builder priceDeprecated(Offer priceDeprecated) {
      this.priceDeprecated = priceDeprecated;
      return this;
    }

    public Builder availability(Availability availability) {
      this.availability = availability;
      return this;
    }

    public Builder image(List<Image> image) {
      this.image = checkForNulls(image);
      return this;
    }

    public Builder child(List<Document> child) {
      this.child = checkForNulls(child);
      return this;
    }

    public Builder aggregateRating(AggregateRating aggregateRating) {
      this.aggregateRating = aggregateRating;
      return this;
    }

    public Builder offer(List<Offer> offer) {
      this.offer = checkForNulls(offer);
      return this;
    }

    public Builder translatedSnippet(List<TranslatedText> translatedSnippet) {
      this.translatedSnippet = checkForNulls(translatedSnippet);
      return this;
    }

    public Builder documentVariant(List<DocumentVariant> documentVariant) {
      this.documentVariant = checkForNulls(documentVariant);
      return this;
    }

    public Builder categoryId(List<String> categoryId) {
      this.categoryId = checkForNulls(categoryId);
      return this;
    }

    public Builder decoration(List<Document> decoration) {
      this.decoration = checkForNulls(decoration);
      return this;
    }

    public Builder parent(List<Document> parent) {
      this.parent = checkForNulls(parent);
      return this;
    }

    public Builder privacyPolicyUrl(String privacyPolicyUrl) {
      this.privacyPolicyUrl = privacyPolicyUrl;
      return this;
    }

    @Override
    public Document build() {
      return new Document(this);
    }
  }
}
