// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Offers.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Label.REPEATED;

/**
 * message PerDeviceAvailabilityRestrictionProto {
 * optional fixed64 androidId = 10;
 * optional int32 deviceRestriction = 11;
 * optional int64 channelId = 12;
 * optional FilterEvaluationInfo filterInfo = 15;
 * }
 */
public final class Availability extends Message {

  public static final Integer DEFAULT_RESTRICTION = 0;
  public static final Integer DEFAULT_OFFERTYPE = 0;
  public static final Boolean DEFAULT_AVAILABLEIFOWNED = false;
  public static final List<Install> DEFAULT_INSTALL = Collections.emptyList();

  @ProtoField(tag = 5, type = INT32)
  public final Integer restriction;

  @ProtoField(tag = 6, type = INT32)
  public final Integer offerType;

  @ProtoField(tag = 7)
  public final Rule rule;

  /**
   * 	repeated PerDeviceAvailabilityRestrictionProto perDeviceAvailabilityRestriction = 9;
   */
  @ProtoField(tag = 13, type = BOOL)
  public final Boolean availableIfOwned;

  @ProtoField(tag = 14, label = REPEATED)
  public final List<Install> install;

  @ProtoField(tag = 16)
  public final FilterEvaluationInfo filterInfo;

  @ProtoField(tag = 17)
  public final OwnershipInfo ownershipInfo;

  public Availability(Integer restriction, Integer offerType, Rule rule, Boolean availableIfOwned, List<Install> install, FilterEvaluationInfo filterInfo, OwnershipInfo ownershipInfo) {
    this.restriction = restriction;
    this.offerType = offerType;
    this.rule = rule;
    this.availableIfOwned = availableIfOwned;
    this.install = immutableCopyOf(install);
    this.filterInfo = filterInfo;
    this.ownershipInfo = ownershipInfo;
  }

  private Availability(Builder builder) {
    this(builder.restriction, builder.offerType, builder.rule, builder.availableIfOwned, builder.install, builder.filterInfo, builder.ownershipInfo);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Availability)) return false;
    Availability o = (Availability) other;
    return equals(restriction, o.restriction)
        && equals(offerType, o.offerType)
        && equals(rule, o.rule)
        && equals(availableIfOwned, o.availableIfOwned)
        && equals(install, o.install)
        && equals(filterInfo, o.filterInfo)
        && equals(ownershipInfo, o.ownershipInfo);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = restriction != null ? restriction.hashCode() : 0;
      result = result * 37 + (offerType != null ? offerType.hashCode() : 0);
      result = result * 37 + (rule != null ? rule.hashCode() : 0);
      result = result * 37 + (availableIfOwned != null ? availableIfOwned.hashCode() : 0);
      result = result * 37 + (install != null ? install.hashCode() : 1);
      result = result * 37 + (filterInfo != null ? filterInfo.hashCode() : 0);
      result = result * 37 + (ownershipInfo != null ? ownershipInfo.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Availability> {

    public Integer restriction;
    public Integer offerType;
    public Rule rule;
    public Boolean availableIfOwned;
    public List<Install> install;
    public FilterEvaluationInfo filterInfo;
    public OwnershipInfo ownershipInfo;

    public Builder() {
    }

    public Builder(Availability message) {
      super(message);
      if (message == null) return;
      this.restriction = message.restriction;
      this.offerType = message.offerType;
      this.rule = message.rule;
      this.availableIfOwned = message.availableIfOwned;
      this.install = copyOf(message.install);
      this.filterInfo = message.filterInfo;
      this.ownershipInfo = message.ownershipInfo;
    }

    public Builder restriction(Integer restriction) {
      this.restriction = restriction;
      return this;
    }

    public Builder offerType(Integer offerType) {
      this.offerType = offerType;
      return this;
    }

    public Builder rule(Rule rule) {
      this.rule = rule;
      return this;
    }

    /**
     * 	repeated PerDeviceAvailabilityRestrictionProto perDeviceAvailabilityRestriction = 9;
     */
    public Builder availableIfOwned(Boolean availableIfOwned) {
      this.availableIfOwned = availableIfOwned;
      return this;
    }

    public Builder install(List<Install> install) {
      this.install = checkForNulls(install);
      return this;
    }

    public Builder filterInfo(FilterEvaluationInfo filterInfo) {
      this.filterInfo = filterInfo;
      return this;
    }

    public Builder ownershipInfo(OwnershipInfo ownershipInfo) {
      this.ownershipInfo = ownershipInfo;
      return this;
    }

    @Override
    public Availability build() {
      return new Availability(this);
    }
  }
}
