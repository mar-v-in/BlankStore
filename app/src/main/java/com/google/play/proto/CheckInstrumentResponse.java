// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Instruments.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Label.REPEATED;

public final class CheckInstrumentResponse extends Message {

  public static final Boolean DEFAULT_USERHASVALIDINSTRUMENT = false;
  public static final Boolean DEFAULT_CHECKOUTTOKENREQUIRED = false;
  public static final List<Instrument> DEFAULT_INSTRUMENT = Collections.emptyList();
  public static final List<Instrument> DEFAULT_ELIGIBLEINSTRUMENT = Collections.emptyList();

  @ProtoField(tag = 1, type = BOOL)
  public final Boolean userHasValidInstrument;

  @ProtoField(tag = 2, type = BOOL)
  public final Boolean checkoutTokenRequired;

  @ProtoField(tag = 4, label = REPEATED)
  public final List<Instrument> instrument;

  @ProtoField(tag = 5, label = REPEATED)
  public final List<Instrument> eligibleInstrument;

  public CheckInstrumentResponse(Boolean userHasValidInstrument, Boolean checkoutTokenRequired, List<Instrument> instrument, List<Instrument> eligibleInstrument) {
    this.userHasValidInstrument = userHasValidInstrument;
    this.checkoutTokenRequired = checkoutTokenRequired;
    this.instrument = immutableCopyOf(instrument);
    this.eligibleInstrument = immutableCopyOf(eligibleInstrument);
  }

  private CheckInstrumentResponse(Builder builder) {
    this(builder.userHasValidInstrument, builder.checkoutTokenRequired, builder.instrument, builder.eligibleInstrument);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CheckInstrumentResponse)) return false;
    CheckInstrumentResponse o = (CheckInstrumentResponse) other;
    return equals(userHasValidInstrument, o.userHasValidInstrument)
        && equals(checkoutTokenRequired, o.checkoutTokenRequired)
        && equals(instrument, o.instrument)
        && equals(eligibleInstrument, o.eligibleInstrument);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = userHasValidInstrument != null ? userHasValidInstrument.hashCode() : 0;
      result = result * 37 + (checkoutTokenRequired != null ? checkoutTokenRequired.hashCode() : 0);
      result = result * 37 + (instrument != null ? instrument.hashCode() : 1);
      result = result * 37 + (eligibleInstrument != null ? eligibleInstrument.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<CheckInstrumentResponse> {

    public Boolean userHasValidInstrument;
    public Boolean checkoutTokenRequired;
    public List<Instrument> instrument;
    public List<Instrument> eligibleInstrument;

    public Builder() {
    }

    public Builder(CheckInstrumentResponse message) {
      super(message);
      if (message == null) return;
      this.userHasValidInstrument = message.userHasValidInstrument;
      this.checkoutTokenRequired = message.checkoutTokenRequired;
      this.instrument = copyOf(message.instrument);
      this.eligibleInstrument = copyOf(message.eligibleInstrument);
    }

    public Builder userHasValidInstrument(Boolean userHasValidInstrument) {
      this.userHasValidInstrument = userHasValidInstrument;
      return this;
    }

    public Builder checkoutTokenRequired(Boolean checkoutTokenRequired) {
      this.checkoutTokenRequired = checkoutTokenRequired;
      return this;
    }

    public Builder instrument(List<Instrument> instrument) {
      this.instrument = checkForNulls(instrument);
      return this;
    }

    public Builder eligibleInstrument(List<Instrument> eligibleInstrument) {
      this.eligibleInstrument = checkForNulls(eligibleInstrument);
      return this;
    }

    @Override
    public CheckInstrumentResponse build() {
      return new CheckInstrumentResponse(this);
    }
  }
}
