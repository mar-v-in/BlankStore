// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/App.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class AppDetails extends Message {

  public static final String DEFAULT_DEVELOPERNAME = "";
  public static final Integer DEFAULT_MAJORVERSIONNUMBER = 0;
  public static final Integer DEFAULT_VERSIONCODE = 0;
  public static final String DEFAULT_VERSIONSTRING = "";
  public static final String DEFAULT_TITLE = "";
  public static final List<String> DEFAULT_APPCATEGORY = Collections.emptyList();
  public static final Integer DEFAULT_CONTENTRATING = 0;
  public static final Long DEFAULT_INSTALLATIONSIZE = 0L;
  public static final List<String> DEFAULT_PERMISSION = Collections.emptyList();
  public static final String DEFAULT_DEVELOPEREMAIL = "";
  public static final String DEFAULT_DEVELOPERWEBSITE = "";
  public static final String DEFAULT_NUMDOWNLOADS = "";
  public static final String DEFAULT_PACKAGENAME = "";
  public static final String DEFAULT_RECENTCHANGESHTML = "";
  public static final String DEFAULT_UPLOADDATE = "";
  public static final List<FileMetadata> DEFAULT_FILE = Collections.emptyList();
  public static final String DEFAULT_APPTYPE = "";

  @ProtoField(tag = 1, type = STRING)
  public final String developerName;

  @ProtoField(tag = 2, type = INT32)
  public final Integer majorVersionNumber;

  @ProtoField(tag = 3, type = INT32)
  public final Integer versionCode;

  @ProtoField(tag = 4, type = STRING)
  public final String versionString;

  @ProtoField(tag = 5, type = STRING)
  public final String title;

  @ProtoField(tag = 7, type = STRING, label = REPEATED)
  public final List<String> appCategory;

  @ProtoField(tag = 8, type = INT32)
  public final Integer contentRating;

  @ProtoField(tag = 9, type = INT64)
  public final Long installationSize;

  @ProtoField(tag = 10, type = STRING, label = REPEATED)
  public final List<String> permission;

  @ProtoField(tag = 11, type = STRING)
  public final String developerEmail;

  @ProtoField(tag = 12, type = STRING)
  public final String developerWebsite;

  @ProtoField(tag = 13, type = STRING)
  public final String numDownloads;

  @ProtoField(tag = 14, type = STRING)
  public final String packageName;

  @ProtoField(tag = 15, type = STRING)
  public final String recentChangesHtml;

  @ProtoField(tag = 16, type = STRING)
  public final String uploadDate;

  @ProtoField(tag = 17, label = REPEATED)
  public final List<FileMetadata> file;

  @ProtoField(tag = 18, type = STRING)
  public final String appType;

  public AppDetails(String developerName, Integer majorVersionNumber, Integer versionCode, String versionString, String title, List<String> appCategory, Integer contentRating, Long installationSize, List<String> permission, String developerEmail, String developerWebsite, String numDownloads, String packageName, String recentChangesHtml, String uploadDate, List<FileMetadata> file, String appType) {
    this.developerName = developerName;
    this.majorVersionNumber = majorVersionNumber;
    this.versionCode = versionCode;
    this.versionString = versionString;
    this.title = title;
    this.appCategory = immutableCopyOf(appCategory);
    this.contentRating = contentRating;
    this.installationSize = installationSize;
    this.permission = immutableCopyOf(permission);
    this.developerEmail = developerEmail;
    this.developerWebsite = developerWebsite;
    this.numDownloads = numDownloads;
    this.packageName = packageName;
    this.recentChangesHtml = recentChangesHtml;
    this.uploadDate = uploadDate;
    this.file = immutableCopyOf(file);
    this.appType = appType;
  }

  private AppDetails(Builder builder) {
    this(builder.developerName, builder.majorVersionNumber, builder.versionCode, builder.versionString, builder.title, builder.appCategory, builder.contentRating, builder.installationSize, builder.permission, builder.developerEmail, builder.developerWebsite, builder.numDownloads, builder.packageName, builder.recentChangesHtml, builder.uploadDate, builder.file, builder.appType);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AppDetails)) return false;
    AppDetails o = (AppDetails) other;
    return equals(developerName, o.developerName)
        && equals(majorVersionNumber, o.majorVersionNumber)
        && equals(versionCode, o.versionCode)
        && equals(versionString, o.versionString)
        && equals(title, o.title)
        && equals(appCategory, o.appCategory)
        && equals(contentRating, o.contentRating)
        && equals(installationSize, o.installationSize)
        && equals(permission, o.permission)
        && equals(developerEmail, o.developerEmail)
        && equals(developerWebsite, o.developerWebsite)
        && equals(numDownloads, o.numDownloads)
        && equals(packageName, o.packageName)
        && equals(recentChangesHtml, o.recentChangesHtml)
        && equals(uploadDate, o.uploadDate)
        && equals(file, o.file)
        && equals(appType, o.appType);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = developerName != null ? developerName.hashCode() : 0;
      result = result * 37 + (majorVersionNumber != null ? majorVersionNumber.hashCode() : 0);
      result = result * 37 + (versionCode != null ? versionCode.hashCode() : 0);
      result = result * 37 + (versionString != null ? versionString.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (appCategory != null ? appCategory.hashCode() : 1);
      result = result * 37 + (contentRating != null ? contentRating.hashCode() : 0);
      result = result * 37 + (installationSize != null ? installationSize.hashCode() : 0);
      result = result * 37 + (permission != null ? permission.hashCode() : 1);
      result = result * 37 + (developerEmail != null ? developerEmail.hashCode() : 0);
      result = result * 37 + (developerWebsite != null ? developerWebsite.hashCode() : 0);
      result = result * 37 + (numDownloads != null ? numDownloads.hashCode() : 0);
      result = result * 37 + (packageName != null ? packageName.hashCode() : 0);
      result = result * 37 + (recentChangesHtml != null ? recentChangesHtml.hashCode() : 0);
      result = result * 37 + (uploadDate != null ? uploadDate.hashCode() : 0);
      result = result * 37 + (file != null ? file.hashCode() : 1);
      result = result * 37 + (appType != null ? appType.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<AppDetails> {

    public String developerName;
    public Integer majorVersionNumber;
    public Integer versionCode;
    public String versionString;
    public String title;
    public List<String> appCategory;
    public Integer contentRating;
    public Long installationSize;
    public List<String> permission;
    public String developerEmail;
    public String developerWebsite;
    public String numDownloads;
    public String packageName;
    public String recentChangesHtml;
    public String uploadDate;
    public List<FileMetadata> file;
    public String appType;

    public Builder() {
    }

    public Builder(AppDetails message) {
      super(message);
      if (message == null) return;
      this.developerName = message.developerName;
      this.majorVersionNumber = message.majorVersionNumber;
      this.versionCode = message.versionCode;
      this.versionString = message.versionString;
      this.title = message.title;
      this.appCategory = copyOf(message.appCategory);
      this.contentRating = message.contentRating;
      this.installationSize = message.installationSize;
      this.permission = copyOf(message.permission);
      this.developerEmail = message.developerEmail;
      this.developerWebsite = message.developerWebsite;
      this.numDownloads = message.numDownloads;
      this.packageName = message.packageName;
      this.recentChangesHtml = message.recentChangesHtml;
      this.uploadDate = message.uploadDate;
      this.file = copyOf(message.file);
      this.appType = message.appType;
    }

    public Builder developerName(String developerName) {
      this.developerName = developerName;
      return this;
    }

    public Builder majorVersionNumber(Integer majorVersionNumber) {
      this.majorVersionNumber = majorVersionNumber;
      return this;
    }

    public Builder versionCode(Integer versionCode) {
      this.versionCode = versionCode;
      return this;
    }

    public Builder versionString(String versionString) {
      this.versionString = versionString;
      return this;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder appCategory(List<String> appCategory) {
      this.appCategory = checkForNulls(appCategory);
      return this;
    }

    public Builder contentRating(Integer contentRating) {
      this.contentRating = contentRating;
      return this;
    }

    public Builder installationSize(Long installationSize) {
      this.installationSize = installationSize;
      return this;
    }

    public Builder permission(List<String> permission) {
      this.permission = checkForNulls(permission);
      return this;
    }

    public Builder developerEmail(String developerEmail) {
      this.developerEmail = developerEmail;
      return this;
    }

    public Builder developerWebsite(String developerWebsite) {
      this.developerWebsite = developerWebsite;
      return this;
    }

    public Builder numDownloads(String numDownloads) {
      this.numDownloads = numDownloads;
      return this;
    }

    public Builder packageName(String packageName) {
      this.packageName = packageName;
      return this;
    }

    public Builder recentChangesHtml(String recentChangesHtml) {
      this.recentChangesHtml = recentChangesHtml;
      return this;
    }

    public Builder uploadDate(String uploadDate) {
      this.uploadDate = uploadDate;
      return this;
    }

    public Builder file(List<FileMetadata> file) {
      this.file = checkForNulls(file);
      return this;
    }

    public Builder appType(String appType) {
      this.appType = appType;
      return this;
    }

    @Override
    public AppDetails build() {
      return new AppDetails(this);
    }
  }
}
