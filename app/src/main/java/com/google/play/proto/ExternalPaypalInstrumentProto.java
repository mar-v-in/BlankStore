// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Paypal.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.STRING;

public final class ExternalPaypalInstrumentProto extends Message {

  public static final String DEFAULT_INSTRUMENTKEY = "";
  public static final String DEFAULT_PREAPPROVALKEY = "";
  public static final String DEFAULT_PAYPALEMAIL = "";
  public static final Boolean DEFAULT_MULTIPLEPAYPALINSTRUMENTSSUPPORTED = false;

  @ProtoField(tag = 1, type = STRING)
  public final String instrumentKey;

  @ProtoField(tag = 2, type = STRING)
  public final String preapprovalKey;

  @ProtoField(tag = 3, type = STRING)
  public final String paypalEmail;

  @ProtoField(tag = 4)
  public final AddressProto paypalAddress;

  @ProtoField(tag = 5, type = BOOL)
  public final Boolean multiplePaypalInstrumentsSupported;

  public ExternalPaypalInstrumentProto(String instrumentKey, String preapprovalKey, String paypalEmail, AddressProto paypalAddress, Boolean multiplePaypalInstrumentsSupported) {
    this.instrumentKey = instrumentKey;
    this.preapprovalKey = preapprovalKey;
    this.paypalEmail = paypalEmail;
    this.paypalAddress = paypalAddress;
    this.multiplePaypalInstrumentsSupported = multiplePaypalInstrumentsSupported;
  }

  private ExternalPaypalInstrumentProto(Builder builder) {
    this(builder.instrumentKey, builder.preapprovalKey, builder.paypalEmail, builder.paypalAddress, builder.multiplePaypalInstrumentsSupported);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ExternalPaypalInstrumentProto)) return false;
    ExternalPaypalInstrumentProto o = (ExternalPaypalInstrumentProto) other;
    return equals(instrumentKey, o.instrumentKey)
        && equals(preapprovalKey, o.preapprovalKey)
        && equals(paypalEmail, o.paypalEmail)
        && equals(paypalAddress, o.paypalAddress)
        && equals(multiplePaypalInstrumentsSupported, o.multiplePaypalInstrumentsSupported);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = instrumentKey != null ? instrumentKey.hashCode() : 0;
      result = result * 37 + (preapprovalKey != null ? preapprovalKey.hashCode() : 0);
      result = result * 37 + (paypalEmail != null ? paypalEmail.hashCode() : 0);
      result = result * 37 + (paypalAddress != null ? paypalAddress.hashCode() : 0);
      result = result * 37 + (multiplePaypalInstrumentsSupported != null ? multiplePaypalInstrumentsSupported.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ExternalPaypalInstrumentProto> {

    public String instrumentKey;
    public String preapprovalKey;
    public String paypalEmail;
    public AddressProto paypalAddress;
    public Boolean multiplePaypalInstrumentsSupported;

    public Builder() {
    }

    public Builder(ExternalPaypalInstrumentProto message) {
      super(message);
      if (message == null) return;
      this.instrumentKey = message.instrumentKey;
      this.preapprovalKey = message.preapprovalKey;
      this.paypalEmail = message.paypalEmail;
      this.paypalAddress = message.paypalAddress;
      this.multiplePaypalInstrumentsSupported = message.multiplePaypalInstrumentsSupported;
    }

    public Builder instrumentKey(String instrumentKey) {
      this.instrumentKey = instrumentKey;
      return this;
    }

    public Builder preapprovalKey(String preapprovalKey) {
      this.preapprovalKey = preapprovalKey;
      return this;
    }

    public Builder paypalEmail(String paypalEmail) {
      this.paypalEmail = paypalEmail;
      return this;
    }

    public Builder paypalAddress(AddressProto paypalAddress) {
      this.paypalAddress = paypalAddress;
      return this;
    }

    public Builder multiplePaypalInstrumentsSupported(Boolean multiplePaypalInstrumentsSupported) {
      this.multiplePaypalInstrumentsSupported = multiplePaypalInstrumentsSupported;
      return this;
    }

    @Override
    public ExternalPaypalInstrumentProto build() {
      return new ExternalPaypalInstrumentProto(this);
    }
  }
}
