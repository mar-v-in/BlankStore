// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Documents.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;

public final class TileTemplate extends Message {

  public static final String DEFAULT_COLORTHEMEARGB = "";
  public static final String DEFAULT_COLORTEXTARGB = "";

  @ProtoField(tag = 1, type = STRING)
  public final String colorThemeArgb;

  @ProtoField(tag = 2, type = STRING)
  public final String colorTextArgb;

  public TileTemplate(String colorThemeArgb, String colorTextArgb) {
    this.colorThemeArgb = colorThemeArgb;
    this.colorTextArgb = colorTextArgb;
  }

  private TileTemplate(Builder builder) {
    this(builder.colorThemeArgb, builder.colorTextArgb);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TileTemplate)) return false;
    TileTemplate o = (TileTemplate) other;
    return equals(colorThemeArgb, o.colorThemeArgb)
        && equals(colorTextArgb, o.colorTextArgb);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = colorThemeArgb != null ? colorThemeArgb.hashCode() : 0;
      result = result * 37 + (colorTextArgb != null ? colorTextArgb.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TileTemplate> {

    public String colorThemeArgb;
    public String colorTextArgb;

    public Builder() {
    }

    public Builder(TileTemplate message) {
      super(message);
      if (message == null) return;
      this.colorThemeArgb = message.colorThemeArgb;
      this.colorTextArgb = message.colorTextArgb;
    }

    public Builder colorThemeArgb(String colorThemeArgb) {
      this.colorThemeArgb = colorThemeArgb;
      return this;
    }

    public Builder colorTextArgb(String colorTextArgb) {
      this.colorTextArgb = colorTextArgb;
      return this;
    }

    @Override
    public TileTemplate build() {
      return new TileTemplate(this);
    }
  }
}
