// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/BadgeImage.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class Badge extends Message {

  public static final String DEFAULT_TITLE = "";
  public static final List<Image> DEFAULT_IMAGE = Collections.emptyList();
  public static final String DEFAULT_BROWSEURL = "";

  @ProtoField(tag = 1, type = STRING)
  public final String title;

  @ProtoField(tag = 2, label = REPEATED)
  public final List<Image> image;

  @ProtoField(tag = 3, type = STRING)
  public final String browseUrl;

  public Badge(String title, List<Image> image, String browseUrl) {
    this.title = title;
    this.image = immutableCopyOf(image);
    this.browseUrl = browseUrl;
  }

  private Badge(Builder builder) {
    this(builder.title, builder.image, builder.browseUrl);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Badge)) return false;
    Badge o = (Badge) other;
    return equals(title, o.title)
        && equals(image, o.image)
        && equals(browseUrl, o.browseUrl);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = title != null ? title.hashCode() : 0;
      result = result * 37 + (image != null ? image.hashCode() : 1);
      result = result * 37 + (browseUrl != null ? browseUrl.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Badge> {

    public String title;
    public List<Image> image;
    public String browseUrl;

    public Builder() {
    }

    public Builder(Badge message) {
      super(message);
      if (message == null) return;
      this.title = message.title;
      this.image = copyOf(message.image);
      this.browseUrl = message.browseUrl;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder image(List<Image> image) {
      this.image = checkForNulls(image);
      return this;
    }

    public Builder browseUrl(String browseUrl) {
      this.browseUrl = browseUrl;
      return this;
    }

    @Override
    public Badge build() {
      return new Badge(this);
    }
  }
}
