// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Instruments.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;

public final class UpdateInstrumentRequest extends Message {

  public static final String DEFAULT_CHECKOUTTOKEN = "";

  @ProtoField(tag = 1)
  public final Instrument instrument;

  @ProtoField(tag = 2, type = STRING)
  public final String checkoutToken;

  public UpdateInstrumentRequest(Instrument instrument, String checkoutToken) {
    this.instrument = instrument;
    this.checkoutToken = checkoutToken;
  }

  private UpdateInstrumentRequest(Builder builder) {
    this(builder.instrument, builder.checkoutToken);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UpdateInstrumentRequest)) return false;
    UpdateInstrumentRequest o = (UpdateInstrumentRequest) other;
    return equals(instrument, o.instrument)
        && equals(checkoutToken, o.checkoutToken);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = instrument != null ? instrument.hashCode() : 0;
      result = result * 37 + (checkoutToken != null ? checkoutToken.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<UpdateInstrumentRequest> {

    public Instrument instrument;
    public String checkoutToken;

    public Builder() {
    }

    public Builder(UpdateInstrumentRequest message) {
      super(message);
      if (message == null) return;
      this.instrument = message.instrument;
      this.checkoutToken = message.checkoutToken;
    }

    public Builder instrument(Instrument instrument) {
      this.instrument = instrument;
      return this;
    }

    public Builder checkoutToken(String checkoutToken) {
      this.checkoutToken = checkoutToken;
      return this;
    }

    @Override
    public UpdateInstrumentRequest build() {
      return new UpdateInstrumentRequest(this);
    }
  }
}
