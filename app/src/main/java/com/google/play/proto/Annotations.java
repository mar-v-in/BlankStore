// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Documents.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class Annotations extends Message {

  public static final List<Warning> DEFAULT_WARNING = Collections.emptyList();
  public static final List<Badge> DEFAULT_BADGEFORCREATOR = Collections.emptyList();
  public static final List<Badge> DEFAULT_BADGEFORDOC = Collections.emptyList();
  public static final List<PromotedDoc> DEFAULT_PROMOTEDDOC = Collections.emptyList();
  public static final String DEFAULT_OFFERNOTE = "";
  public static final List<DocV2> DEFAULT_SUBSCRIPTION = Collections.emptyList();
  public static final String DEFAULT_PRIVACYPOLICYURL = "";

  @ProtoField(tag = 1)
  public final SectionMetadata sectionRelated;

  @ProtoField(tag = 2)
  public final SectionMetadata sectionMoreBy;

  @ProtoField(tag = 3)
  public final PlusOneData plusOneData;

  @ProtoField(tag = 4, label = REPEATED)
  public final List<Warning> warning;

  @ProtoField(tag = 5)
  public final SectionMetadata sectionBodyOfWork;

  @ProtoField(tag = 6)
  public final SectionMetadata sectionCoreContent;

  @ProtoField(tag = 7)
  public final Template template;

  @ProtoField(tag = 8, label = REPEATED)
  public final List<Badge> badgeForCreator;

  @ProtoField(tag = 9, label = REPEATED)
  public final List<Badge> badgeForDoc;

  @ProtoField(tag = 10)
  public final Link link;

  @ProtoField(tag = 11)
  public final SectionMetadata sectionCrossSell;

  @ProtoField(tag = 12)
  public final SectionMetadata sectionRelatedDocType;

  @ProtoField(tag = 13, label = REPEATED)
  public final List<PromotedDoc> promotedDoc;

  @ProtoField(tag = 14, type = STRING)
  public final String offerNote;

  @ProtoField(tag = 16, label = REPEATED)
  public final List<DocV2> subscription;

  @ProtoField(tag = 17)
  public final Reason reason;

  @ProtoField(tag = 18, type = STRING)
  public final String privacyPolicyUrl;

  public Annotations(SectionMetadata sectionRelated, SectionMetadata sectionMoreBy, PlusOneData plusOneData, List<Warning> warning, SectionMetadata sectionBodyOfWork, SectionMetadata sectionCoreContent, Template template, List<Badge> badgeForCreator, List<Badge> badgeForDoc, Link link, SectionMetadata sectionCrossSell, SectionMetadata sectionRelatedDocType, List<PromotedDoc> promotedDoc, String offerNote, List<DocV2> subscription, Reason reason, String privacyPolicyUrl) {
    this.sectionRelated = sectionRelated;
    this.sectionMoreBy = sectionMoreBy;
    this.plusOneData = plusOneData;
    this.warning = immutableCopyOf(warning);
    this.sectionBodyOfWork = sectionBodyOfWork;
    this.sectionCoreContent = sectionCoreContent;
    this.template = template;
    this.badgeForCreator = immutableCopyOf(badgeForCreator);
    this.badgeForDoc = immutableCopyOf(badgeForDoc);
    this.link = link;
    this.sectionCrossSell = sectionCrossSell;
    this.sectionRelatedDocType = sectionRelatedDocType;
    this.promotedDoc = immutableCopyOf(promotedDoc);
    this.offerNote = offerNote;
    this.subscription = immutableCopyOf(subscription);
    this.reason = reason;
    this.privacyPolicyUrl = privacyPolicyUrl;
  }

  private Annotations(Builder builder) {
    this(builder.sectionRelated, builder.sectionMoreBy, builder.plusOneData, builder.warning, builder.sectionBodyOfWork, builder.sectionCoreContent, builder.template, builder.badgeForCreator, builder.badgeForDoc, builder.link, builder.sectionCrossSell, builder.sectionRelatedDocType, builder.promotedDoc, builder.offerNote, builder.subscription, builder.reason, builder.privacyPolicyUrl);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Annotations)) return false;
    Annotations o = (Annotations) other;
    return equals(sectionRelated, o.sectionRelated)
        && equals(sectionMoreBy, o.sectionMoreBy)
        && equals(plusOneData, o.plusOneData)
        && equals(warning, o.warning)
        && equals(sectionBodyOfWork, o.sectionBodyOfWork)
        && equals(sectionCoreContent, o.sectionCoreContent)
        && equals(template, o.template)
        && equals(badgeForCreator, o.badgeForCreator)
        && equals(badgeForDoc, o.badgeForDoc)
        && equals(link, o.link)
        && equals(sectionCrossSell, o.sectionCrossSell)
        && equals(sectionRelatedDocType, o.sectionRelatedDocType)
        && equals(promotedDoc, o.promotedDoc)
        && equals(offerNote, o.offerNote)
        && equals(subscription, o.subscription)
        && equals(reason, o.reason)
        && equals(privacyPolicyUrl, o.privacyPolicyUrl);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = sectionRelated != null ? sectionRelated.hashCode() : 0;
      result = result * 37 + (sectionMoreBy != null ? sectionMoreBy.hashCode() : 0);
      result = result * 37 + (plusOneData != null ? plusOneData.hashCode() : 0);
      result = result * 37 + (warning != null ? warning.hashCode() : 1);
      result = result * 37 + (sectionBodyOfWork != null ? sectionBodyOfWork.hashCode() : 0);
      result = result * 37 + (sectionCoreContent != null ? sectionCoreContent.hashCode() : 0);
      result = result * 37 + (template != null ? template.hashCode() : 0);
      result = result * 37 + (badgeForCreator != null ? badgeForCreator.hashCode() : 1);
      result = result * 37 + (badgeForDoc != null ? badgeForDoc.hashCode() : 1);
      result = result * 37 + (link != null ? link.hashCode() : 0);
      result = result * 37 + (sectionCrossSell != null ? sectionCrossSell.hashCode() : 0);
      result = result * 37 + (sectionRelatedDocType != null ? sectionRelatedDocType.hashCode() : 0);
      result = result * 37 + (promotedDoc != null ? promotedDoc.hashCode() : 1);
      result = result * 37 + (offerNote != null ? offerNote.hashCode() : 0);
      result = result * 37 + (subscription != null ? subscription.hashCode() : 1);
      result = result * 37 + (reason != null ? reason.hashCode() : 0);
      result = result * 37 + (privacyPolicyUrl != null ? privacyPolicyUrl.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Annotations> {

    public SectionMetadata sectionRelated;
    public SectionMetadata sectionMoreBy;
    public PlusOneData plusOneData;
    public List<Warning> warning;
    public SectionMetadata sectionBodyOfWork;
    public SectionMetadata sectionCoreContent;
    public Template template;
    public List<Badge> badgeForCreator;
    public List<Badge> badgeForDoc;
    public Link link;
    public SectionMetadata sectionCrossSell;
    public SectionMetadata sectionRelatedDocType;
    public List<PromotedDoc> promotedDoc;
    public String offerNote;
    public List<DocV2> subscription;
    public Reason reason;
    public String privacyPolicyUrl;

    public Builder() {
    }

    public Builder(Annotations message) {
      super(message);
      if (message == null) return;
      this.sectionRelated = message.sectionRelated;
      this.sectionMoreBy = message.sectionMoreBy;
      this.plusOneData = message.plusOneData;
      this.warning = copyOf(message.warning);
      this.sectionBodyOfWork = message.sectionBodyOfWork;
      this.sectionCoreContent = message.sectionCoreContent;
      this.template = message.template;
      this.badgeForCreator = copyOf(message.badgeForCreator);
      this.badgeForDoc = copyOf(message.badgeForDoc);
      this.link = message.link;
      this.sectionCrossSell = message.sectionCrossSell;
      this.sectionRelatedDocType = message.sectionRelatedDocType;
      this.promotedDoc = copyOf(message.promotedDoc);
      this.offerNote = message.offerNote;
      this.subscription = copyOf(message.subscription);
      this.reason = message.reason;
      this.privacyPolicyUrl = message.privacyPolicyUrl;
    }

    public Builder sectionRelated(SectionMetadata sectionRelated) {
      this.sectionRelated = sectionRelated;
      return this;
    }

    public Builder sectionMoreBy(SectionMetadata sectionMoreBy) {
      this.sectionMoreBy = sectionMoreBy;
      return this;
    }

    public Builder plusOneData(PlusOneData plusOneData) {
      this.plusOneData = plusOneData;
      return this;
    }

    public Builder warning(List<Warning> warning) {
      this.warning = checkForNulls(warning);
      return this;
    }

    public Builder sectionBodyOfWork(SectionMetadata sectionBodyOfWork) {
      this.sectionBodyOfWork = sectionBodyOfWork;
      return this;
    }

    public Builder sectionCoreContent(SectionMetadata sectionCoreContent) {
      this.sectionCoreContent = sectionCoreContent;
      return this;
    }

    public Builder template(Template template) {
      this.template = template;
      return this;
    }

    public Builder badgeForCreator(List<Badge> badgeForCreator) {
      this.badgeForCreator = checkForNulls(badgeForCreator);
      return this;
    }

    public Builder badgeForDoc(List<Badge> badgeForDoc) {
      this.badgeForDoc = checkForNulls(badgeForDoc);
      return this;
    }

    public Builder link(Link link) {
      this.link = link;
      return this;
    }

    public Builder sectionCrossSell(SectionMetadata sectionCrossSell) {
      this.sectionCrossSell = sectionCrossSell;
      return this;
    }

    public Builder sectionRelatedDocType(SectionMetadata sectionRelatedDocType) {
      this.sectionRelatedDocType = sectionRelatedDocType;
      return this;
    }

    public Builder promotedDoc(List<PromotedDoc> promotedDoc) {
      this.promotedDoc = checkForNulls(promotedDoc);
      return this;
    }

    public Builder offerNote(String offerNote) {
      this.offerNote = offerNote;
      return this;
    }

    public Builder subscription(List<DocV2> subscription) {
      this.subscription = checkForNulls(subscription);
      return this;
    }

    public Builder reason(Reason reason) {
      this.reason = reason;
      return this;
    }

    public Builder privacyPolicyUrl(String privacyPolicyUrl) {
      this.privacyPolicyUrl = privacyPolicyUrl;
      return this;
    }

    @Override
    public Annotations build() {
      return new Annotations(this);
    }
  }
}
