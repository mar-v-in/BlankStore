// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Book.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class BookDetails extends Message {

  public static final List<BookSubject> DEFAULT_SUBJECT = Collections.emptyList();
  public static final String DEFAULT_PUBLISHER = "";
  public static final String DEFAULT_PUBLICATIONDATE = "";
  public static final String DEFAULT_ISBN = "";
  public static final Integer DEFAULT_NUMBEROFPAGES = 0;
  public static final String DEFAULT_SUBTITLE = "";
  public static final List<BookAuthor> DEFAULT_AUTHOR = Collections.emptyList();
  public static final String DEFAULT_READERURL = "";
  public static final String DEFAULT_DOWNLOADEPUBURL = "";
  public static final String DEFAULT_DOWNLOADPDFURL = "";
  public static final String DEFAULT_ACSEPUBTOKENURL = "";
  public static final String DEFAULT_ACSPDFTOKENURL = "";
  public static final Boolean DEFAULT_EPUBAVAILABLE = false;
  public static final Boolean DEFAULT_PDFAVAILABLE = false;
  public static final String DEFAULT_ABOUTTHEAUTHOR = "";
  public static final List<IdentifierProto> DEFAULT_IDENTIFIER = Collections.emptyList();

  @ProtoField(tag = 3, label = REPEATED)
  public final List<BookSubject> subject;

  @ProtoField(tag = 4, type = STRING)
  public final String publisher;

  @ProtoField(tag = 5, type = STRING)
  public final String publicationDate;

  @ProtoField(tag = 6, type = STRING)
  public final String isbn;

  @ProtoField(tag = 7, type = INT32)
  public final Integer numberOfPages;

  @ProtoField(tag = 8, type = STRING)
  public final String subtitle;

  @ProtoField(tag = 9, label = REPEATED)
  public final List<BookAuthor> author;

  @ProtoField(tag = 10, type = STRING)
  public final String readerUrl;

  @ProtoField(tag = 11, type = STRING)
  public final String downloadEpubUrl;

  @ProtoField(tag = 12, type = STRING)
  public final String downloadPdfUrl;

  @ProtoField(tag = 13, type = STRING)
  public final String acsEpubTokenUrl;

  @ProtoField(tag = 14, type = STRING)
  public final String acsPdfTokenUrl;

  @ProtoField(tag = 15, type = BOOL)
  public final Boolean epubAvailable;

  @ProtoField(tag = 16, type = BOOL)
  public final Boolean pdfAvailable;

  @ProtoField(tag = 17, type = STRING)
  public final String aboutTheAuthor;

  @ProtoField(tag = 18, label = REPEATED)
  public final List<IdentifierProto> identifier;

  public BookDetails(List<BookSubject> subject, String publisher, String publicationDate, String isbn, Integer numberOfPages, String subtitle, List<BookAuthor> author, String readerUrl, String downloadEpubUrl, String downloadPdfUrl, String acsEpubTokenUrl, String acsPdfTokenUrl, Boolean epubAvailable, Boolean pdfAvailable, String aboutTheAuthor, List<IdentifierProto> identifier) {
    this.subject = immutableCopyOf(subject);
    this.publisher = publisher;
    this.publicationDate = publicationDate;
    this.isbn = isbn;
    this.numberOfPages = numberOfPages;
    this.subtitle = subtitle;
    this.author = immutableCopyOf(author);
    this.readerUrl = readerUrl;
    this.downloadEpubUrl = downloadEpubUrl;
    this.downloadPdfUrl = downloadPdfUrl;
    this.acsEpubTokenUrl = acsEpubTokenUrl;
    this.acsPdfTokenUrl = acsPdfTokenUrl;
    this.epubAvailable = epubAvailable;
    this.pdfAvailable = pdfAvailable;
    this.aboutTheAuthor = aboutTheAuthor;
    this.identifier = immutableCopyOf(identifier);
  }

  private BookDetails(Builder builder) {
    this(builder.subject, builder.publisher, builder.publicationDate, builder.isbn, builder.numberOfPages, builder.subtitle, builder.author, builder.readerUrl, builder.downloadEpubUrl, builder.downloadPdfUrl, builder.acsEpubTokenUrl, builder.acsPdfTokenUrl, builder.epubAvailable, builder.pdfAvailable, builder.aboutTheAuthor, builder.identifier);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof BookDetails)) return false;
    BookDetails o = (BookDetails) other;
    return equals(subject, o.subject)
        && equals(publisher, o.publisher)
        && equals(publicationDate, o.publicationDate)
        && equals(isbn, o.isbn)
        && equals(numberOfPages, o.numberOfPages)
        && equals(subtitle, o.subtitle)
        && equals(author, o.author)
        && equals(readerUrl, o.readerUrl)
        && equals(downloadEpubUrl, o.downloadEpubUrl)
        && equals(downloadPdfUrl, o.downloadPdfUrl)
        && equals(acsEpubTokenUrl, o.acsEpubTokenUrl)
        && equals(acsPdfTokenUrl, o.acsPdfTokenUrl)
        && equals(epubAvailable, o.epubAvailable)
        && equals(pdfAvailable, o.pdfAvailable)
        && equals(aboutTheAuthor, o.aboutTheAuthor)
        && equals(identifier, o.identifier);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = subject != null ? subject.hashCode() : 1;
      result = result * 37 + (publisher != null ? publisher.hashCode() : 0);
      result = result * 37 + (publicationDate != null ? publicationDate.hashCode() : 0);
      result = result * 37 + (isbn != null ? isbn.hashCode() : 0);
      result = result * 37 + (numberOfPages != null ? numberOfPages.hashCode() : 0);
      result = result * 37 + (subtitle != null ? subtitle.hashCode() : 0);
      result = result * 37 + (author != null ? author.hashCode() : 1);
      result = result * 37 + (readerUrl != null ? readerUrl.hashCode() : 0);
      result = result * 37 + (downloadEpubUrl != null ? downloadEpubUrl.hashCode() : 0);
      result = result * 37 + (downloadPdfUrl != null ? downloadPdfUrl.hashCode() : 0);
      result = result * 37 + (acsEpubTokenUrl != null ? acsEpubTokenUrl.hashCode() : 0);
      result = result * 37 + (acsPdfTokenUrl != null ? acsPdfTokenUrl.hashCode() : 0);
      result = result * 37 + (epubAvailable != null ? epubAvailable.hashCode() : 0);
      result = result * 37 + (pdfAvailable != null ? pdfAvailable.hashCode() : 0);
      result = result * 37 + (aboutTheAuthor != null ? aboutTheAuthor.hashCode() : 0);
      result = result * 37 + (identifier != null ? identifier.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<BookDetails> {

    public List<BookSubject> subject;
    public String publisher;
    public String publicationDate;
    public String isbn;
    public Integer numberOfPages;
    public String subtitle;
    public List<BookAuthor> author;
    public String readerUrl;
    public String downloadEpubUrl;
    public String downloadPdfUrl;
    public String acsEpubTokenUrl;
    public String acsPdfTokenUrl;
    public Boolean epubAvailable;
    public Boolean pdfAvailable;
    public String aboutTheAuthor;
    public List<IdentifierProto> identifier;

    public Builder() {
    }

    public Builder(BookDetails message) {
      super(message);
      if (message == null) return;
      this.subject = copyOf(message.subject);
      this.publisher = message.publisher;
      this.publicationDate = message.publicationDate;
      this.isbn = message.isbn;
      this.numberOfPages = message.numberOfPages;
      this.subtitle = message.subtitle;
      this.author = copyOf(message.author);
      this.readerUrl = message.readerUrl;
      this.downloadEpubUrl = message.downloadEpubUrl;
      this.downloadPdfUrl = message.downloadPdfUrl;
      this.acsEpubTokenUrl = message.acsEpubTokenUrl;
      this.acsPdfTokenUrl = message.acsPdfTokenUrl;
      this.epubAvailable = message.epubAvailable;
      this.pdfAvailable = message.pdfAvailable;
      this.aboutTheAuthor = message.aboutTheAuthor;
      this.identifier = copyOf(message.identifier);
    }

    public Builder subject(List<BookSubject> subject) {
      this.subject = checkForNulls(subject);
      return this;
    }

    public Builder publisher(String publisher) {
      this.publisher = publisher;
      return this;
    }

    public Builder publicationDate(String publicationDate) {
      this.publicationDate = publicationDate;
      return this;
    }

    public Builder isbn(String isbn) {
      this.isbn = isbn;
      return this;
    }

    public Builder numberOfPages(Integer numberOfPages) {
      this.numberOfPages = numberOfPages;
      return this;
    }

    public Builder subtitle(String subtitle) {
      this.subtitle = subtitle;
      return this;
    }

    public Builder author(List<BookAuthor> author) {
      this.author = checkForNulls(author);
      return this;
    }

    public Builder readerUrl(String readerUrl) {
      this.readerUrl = readerUrl;
      return this;
    }

    public Builder downloadEpubUrl(String downloadEpubUrl) {
      this.downloadEpubUrl = downloadEpubUrl;
      return this;
    }

    public Builder downloadPdfUrl(String downloadPdfUrl) {
      this.downloadPdfUrl = downloadPdfUrl;
      return this;
    }

    public Builder acsEpubTokenUrl(String acsEpubTokenUrl) {
      this.acsEpubTokenUrl = acsEpubTokenUrl;
      return this;
    }

    public Builder acsPdfTokenUrl(String acsPdfTokenUrl) {
      this.acsPdfTokenUrl = acsPdfTokenUrl;
      return this;
    }

    public Builder epubAvailable(Boolean epubAvailable) {
      this.epubAvailable = epubAvailable;
      return this;
    }

    public Builder pdfAvailable(Boolean pdfAvailable) {
      this.pdfAvailable = pdfAvailable;
      return this;
    }

    public Builder aboutTheAuthor(String aboutTheAuthor) {
      this.aboutTheAuthor = aboutTheAuthor;
      return this;
    }

    public Builder identifier(List<IdentifierProto> identifier) {
      this.identifier = checkForNulls(identifier);
      return this;
    }

    @Override
    public BookDetails build() {
      return new BookDetails(this);
    }
  }
}
