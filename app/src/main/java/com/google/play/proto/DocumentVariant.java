// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Documents.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class DocumentVariant extends Message {

  public static final Integer DEFAULT_VARIATIONTYPE = 0;
  public static final String DEFAULT_TITLE = "";
  public static final List<String> DEFAULT_SNIPPET = Collections.emptyList();
  public static final String DEFAULT_RECENTCHANGES = "";
  public static final List<TranslatedText> DEFAULT_AUTOTRANSLATION = Collections.emptyList();
  public static final List<Offer> DEFAULT_OFFER = Collections.emptyList();
  public static final Long DEFAULT_CHANNELID = 0L;
  public static final List<Document> DEFAULT_CHILD = Collections.emptyList();
  public static final List<Document> DEFAULT_DECORATION = Collections.emptyList();

  @ProtoField(tag = 1, type = INT32)
  public final Integer variationType;

  @ProtoField(tag = 2)
  public final Rule rule;

  @ProtoField(tag = 3, type = STRING)
  public final String title;

  @ProtoField(tag = 4, type = STRING, label = REPEATED)
  public final List<String> snippet;

  @ProtoField(tag = 5, type = STRING)
  public final String recentChanges;

  @ProtoField(tag = 6, label = REPEATED)
  public final List<TranslatedText> autoTranslation;

  @ProtoField(tag = 7, label = REPEATED)
  public final List<Offer> offer;

  @ProtoField(tag = 9, type = INT64)
  public final Long channelId;

  @ProtoField(tag = 10, label = REPEATED)
  public final List<Document> child;

  @ProtoField(tag = 11, label = REPEATED)
  public final List<Document> decoration;

  public DocumentVariant(Integer variationType, Rule rule, String title, List<String> snippet, String recentChanges, List<TranslatedText> autoTranslation, List<Offer> offer, Long channelId, List<Document> child, List<Document> decoration) {
    this.variationType = variationType;
    this.rule = rule;
    this.title = title;
    this.snippet = immutableCopyOf(snippet);
    this.recentChanges = recentChanges;
    this.autoTranslation = immutableCopyOf(autoTranslation);
    this.offer = immutableCopyOf(offer);
    this.channelId = channelId;
    this.child = immutableCopyOf(child);
    this.decoration = immutableCopyOf(decoration);
  }

  private DocumentVariant(Builder builder) {
    this(builder.variationType, builder.rule, builder.title, builder.snippet, builder.recentChanges, builder.autoTranslation, builder.offer, builder.channelId, builder.child, builder.decoration);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DocumentVariant)) return false;
    DocumentVariant o = (DocumentVariant) other;
    return equals(variationType, o.variationType)
        && equals(rule, o.rule)
        && equals(title, o.title)
        && equals(snippet, o.snippet)
        && equals(recentChanges, o.recentChanges)
        && equals(autoTranslation, o.autoTranslation)
        && equals(offer, o.offer)
        && equals(channelId, o.channelId)
        && equals(child, o.child)
        && equals(decoration, o.decoration);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = variationType != null ? variationType.hashCode() : 0;
      result = result * 37 + (rule != null ? rule.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (snippet != null ? snippet.hashCode() : 1);
      result = result * 37 + (recentChanges != null ? recentChanges.hashCode() : 0);
      result = result * 37 + (autoTranslation != null ? autoTranslation.hashCode() : 1);
      result = result * 37 + (offer != null ? offer.hashCode() : 1);
      result = result * 37 + (channelId != null ? channelId.hashCode() : 0);
      result = result * 37 + (child != null ? child.hashCode() : 1);
      result = result * 37 + (decoration != null ? decoration.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<DocumentVariant> {

    public Integer variationType;
    public Rule rule;
    public String title;
    public List<String> snippet;
    public String recentChanges;
    public List<TranslatedText> autoTranslation;
    public List<Offer> offer;
    public Long channelId;
    public List<Document> child;
    public List<Document> decoration;

    public Builder() {
    }

    public Builder(DocumentVariant message) {
      super(message);
      if (message == null) return;
      this.variationType = message.variationType;
      this.rule = message.rule;
      this.title = message.title;
      this.snippet = copyOf(message.snippet);
      this.recentChanges = message.recentChanges;
      this.autoTranslation = copyOf(message.autoTranslation);
      this.offer = copyOf(message.offer);
      this.channelId = message.channelId;
      this.child = copyOf(message.child);
      this.decoration = copyOf(message.decoration);
    }

    public Builder variationType(Integer variationType) {
      this.variationType = variationType;
      return this;
    }

    public Builder rule(Rule rule) {
      this.rule = rule;
      return this;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder snippet(List<String> snippet) {
      this.snippet = checkForNulls(snippet);
      return this;
    }

    public Builder recentChanges(String recentChanges) {
      this.recentChanges = recentChanges;
      return this;
    }

    public Builder autoTranslation(List<TranslatedText> autoTranslation) {
      this.autoTranslation = checkForNulls(autoTranslation);
      return this;
    }

    public Builder offer(List<Offer> offer) {
      this.offer = checkForNulls(offer);
      return this;
    }

    public Builder channelId(Long channelId) {
      this.channelId = channelId;
      return this;
    }

    public Builder child(List<Document> child) {
      this.child = checkForNulls(child);
      return this;
    }

    public Builder decoration(List<Document> decoration) {
      this.decoration = checkForNulls(decoration);
      return this;
    }

    @Override
    public DocumentVariant build() {
      return new DocumentVariant(this);
    }
  }
}
