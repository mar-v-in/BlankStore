// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Challenges.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class AddressChallenge extends Message {

  public static final String DEFAULT_RESPONSEADDRESSPARAM = "";
  public static final String DEFAULT_RESPONSECHECKBOXESPARAM = "";
  public static final String DEFAULT_TITLE = "";
  public static final String DEFAULT_DESCRIPTIONHTML = "";
  public static final List<FormCheckbox> DEFAULT_CHECKBOX = Collections.emptyList();
  public static final List<InputValidationError> DEFAULT_ERRORINPUTFIELD = Collections.emptyList();
  public static final String DEFAULT_ERRORHTML = "";
  public static final List<Integer> DEFAULT_REQUIREDFIELD = Collections.emptyList();

  @ProtoField(tag = 1, type = STRING)
  public final String responseAddressParam;

  @ProtoField(tag = 2, type = STRING)
  public final String responseCheckboxesParam;

  @ProtoField(tag = 3, type = STRING)
  public final String title;

  @ProtoField(tag = 4, type = STRING)
  public final String descriptionHtml;

  @ProtoField(tag = 5, label = REPEATED)
  public final List<FormCheckbox> checkbox;

  @ProtoField(tag = 6)
  public final Address address;

  @ProtoField(tag = 7, label = REPEATED)
  public final List<InputValidationError> errorInputField;

  @ProtoField(tag = 8, type = STRING)
  public final String errorHtml;

  @ProtoField(tag = 9, type = INT32, label = REPEATED)
  public final List<Integer> requiredField;

  public AddressChallenge(String responseAddressParam, String responseCheckboxesParam, String title, String descriptionHtml, List<FormCheckbox> checkbox, Address address, List<InputValidationError> errorInputField, String errorHtml, List<Integer> requiredField) {
    this.responseAddressParam = responseAddressParam;
    this.responseCheckboxesParam = responseCheckboxesParam;
    this.title = title;
    this.descriptionHtml = descriptionHtml;
    this.checkbox = immutableCopyOf(checkbox);
    this.address = address;
    this.errorInputField = immutableCopyOf(errorInputField);
    this.errorHtml = errorHtml;
    this.requiredField = immutableCopyOf(requiredField);
  }

  private AddressChallenge(Builder builder) {
    this(builder.responseAddressParam, builder.responseCheckboxesParam, builder.title, builder.descriptionHtml, builder.checkbox, builder.address, builder.errorInputField, builder.errorHtml, builder.requiredField);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AddressChallenge)) return false;
    AddressChallenge o = (AddressChallenge) other;
    return equals(responseAddressParam, o.responseAddressParam)
        && equals(responseCheckboxesParam, o.responseCheckboxesParam)
        && equals(title, o.title)
        && equals(descriptionHtml, o.descriptionHtml)
        && equals(checkbox, o.checkbox)
        && equals(address, o.address)
        && equals(errorInputField, o.errorInputField)
        && equals(errorHtml, o.errorHtml)
        && equals(requiredField, o.requiredField);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = responseAddressParam != null ? responseAddressParam.hashCode() : 0;
      result = result * 37 + (responseCheckboxesParam != null ? responseCheckboxesParam.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (descriptionHtml != null ? descriptionHtml.hashCode() : 0);
      result = result * 37 + (checkbox != null ? checkbox.hashCode() : 1);
      result = result * 37 + (address != null ? address.hashCode() : 0);
      result = result * 37 + (errorInputField != null ? errorInputField.hashCode() : 1);
      result = result * 37 + (errorHtml != null ? errorHtml.hashCode() : 0);
      result = result * 37 + (requiredField != null ? requiredField.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<AddressChallenge> {

    public String responseAddressParam;
    public String responseCheckboxesParam;
    public String title;
    public String descriptionHtml;
    public List<FormCheckbox> checkbox;
    public Address address;
    public List<InputValidationError> errorInputField;
    public String errorHtml;
    public List<Integer> requiredField;

    public Builder() {
    }

    public Builder(AddressChallenge message) {
      super(message);
      if (message == null) return;
      this.responseAddressParam = message.responseAddressParam;
      this.responseCheckboxesParam = message.responseCheckboxesParam;
      this.title = message.title;
      this.descriptionHtml = message.descriptionHtml;
      this.checkbox = copyOf(message.checkbox);
      this.address = message.address;
      this.errorInputField = copyOf(message.errorInputField);
      this.errorHtml = message.errorHtml;
      this.requiredField = copyOf(message.requiredField);
    }

    public Builder responseAddressParam(String responseAddressParam) {
      this.responseAddressParam = responseAddressParam;
      return this;
    }

    public Builder responseCheckboxesParam(String responseCheckboxesParam) {
      this.responseCheckboxesParam = responseCheckboxesParam;
      return this;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder descriptionHtml(String descriptionHtml) {
      this.descriptionHtml = descriptionHtml;
      return this;
    }

    public Builder checkbox(List<FormCheckbox> checkbox) {
      this.checkbox = checkForNulls(checkbox);
      return this;
    }

    public Builder address(Address address) {
      this.address = address;
      return this;
    }

    public Builder errorInputField(List<InputValidationError> errorInputField) {
      this.errorInputField = checkForNulls(errorInputField);
      return this;
    }

    public Builder errorHtml(String errorHtml) {
      this.errorHtml = errorHtml;
      return this;
    }

    public Builder requiredField(List<Integer> requiredField) {
      this.requiredField = checkForNulls(requiredField);
      return this;
    }

    @Override
    public AddressChallenge build() {
      return new AddressChallenge(this);
    }
  }
}
