// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Music.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class MusicDetails extends Message {

  public static final Integer DEFAULT_CENSORING = 0;
  public static final Integer DEFAULT_DURATIONSEC = 0;
  public static final String DEFAULT_ORIGINALRELEASEDATE = "";
  public static final String DEFAULT_LABEL = "";
  public static final List<ArtistDetails> DEFAULT_ARTIST = Collections.emptyList();
  public static final List<String> DEFAULT_GENRE = Collections.emptyList();
  public static final String DEFAULT_RELEASEDATE = "";
  public static final List<Integer> DEFAULT_RELEASETYPE = Collections.emptyList();

  @ProtoField(tag = 1, type = INT32)
  public final Integer censoring;

  @ProtoField(tag = 2, type = INT32)
  public final Integer durationSec;

  @ProtoField(tag = 3, type = STRING)
  public final String originalReleaseDate;

  @ProtoField(tag = 4, type = STRING)
  public final String label;

  @ProtoField(tag = 5, label = REPEATED)
  public final List<ArtistDetails> artist;

  @ProtoField(tag = 6, type = STRING, label = REPEATED)
  public final List<String> genre;

  @ProtoField(tag = 7, type = STRING)
  public final String releaseDate;

  @ProtoField(tag = 8, type = INT32, label = REPEATED)
  public final List<Integer> releaseType;

  public MusicDetails(Integer censoring, Integer durationSec, String originalReleaseDate, String label, List<ArtistDetails> artist, List<String> genre, String releaseDate, List<Integer> releaseType) {
    this.censoring = censoring;
    this.durationSec = durationSec;
    this.originalReleaseDate = originalReleaseDate;
    this.label = label;
    this.artist = immutableCopyOf(artist);
    this.genre = immutableCopyOf(genre);
    this.releaseDate = releaseDate;
    this.releaseType = immutableCopyOf(releaseType);
  }

  private MusicDetails(Builder builder) {
    this(builder.censoring, builder.durationSec, builder.originalReleaseDate, builder.label, builder.artist, builder.genre, builder.releaseDate, builder.releaseType);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MusicDetails)) return false;
    MusicDetails o = (MusicDetails) other;
    return equals(censoring, o.censoring)
        && equals(durationSec, o.durationSec)
        && equals(originalReleaseDate, o.originalReleaseDate)
        && equals(label, o.label)
        && equals(artist, o.artist)
        && equals(genre, o.genre)
        && equals(releaseDate, o.releaseDate)
        && equals(releaseType, o.releaseType);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = censoring != null ? censoring.hashCode() : 0;
      result = result * 37 + (durationSec != null ? durationSec.hashCode() : 0);
      result = result * 37 + (originalReleaseDate != null ? originalReleaseDate.hashCode() : 0);
      result = result * 37 + (label != null ? label.hashCode() : 0);
      result = result * 37 + (artist != null ? artist.hashCode() : 1);
      result = result * 37 + (genre != null ? genre.hashCode() : 1);
      result = result * 37 + (releaseDate != null ? releaseDate.hashCode() : 0);
      result = result * 37 + (releaseType != null ? releaseType.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<MusicDetails> {

    public Integer censoring;
    public Integer durationSec;
    public String originalReleaseDate;
    public String label;
    public List<ArtistDetails> artist;
    public List<String> genre;
    public String releaseDate;
    public List<Integer> releaseType;

    public Builder() {
    }

    public Builder(MusicDetails message) {
      super(message);
      if (message == null) return;
      this.censoring = message.censoring;
      this.durationSec = message.durationSec;
      this.originalReleaseDate = message.originalReleaseDate;
      this.label = message.label;
      this.artist = copyOf(message.artist);
      this.genre = copyOf(message.genre);
      this.releaseDate = message.releaseDate;
      this.releaseType = copyOf(message.releaseType);
    }

    public Builder censoring(Integer censoring) {
      this.censoring = censoring;
      return this;
    }

    public Builder durationSec(Integer durationSec) {
      this.durationSec = durationSec;
      return this;
    }

    public Builder originalReleaseDate(String originalReleaseDate) {
      this.originalReleaseDate = originalReleaseDate;
      return this;
    }

    public Builder label(String label) {
      this.label = label;
      return this;
    }

    public Builder artist(List<ArtistDetails> artist) {
      this.artist = checkForNulls(artist);
      return this;
    }

    public Builder genre(List<String> genre) {
      this.genre = checkForNulls(genre);
      return this;
    }

    public Builder releaseDate(String releaseDate) {
      this.releaseDate = releaseDate;
      return this;
    }

    public Builder releaseType(List<Integer> releaseType) {
      this.releaseType = checkForNulls(releaseType);
      return this;
    }

    @Override
    public MusicDetails build() {
      return new MusicDetails(this);
    }
  }
}
