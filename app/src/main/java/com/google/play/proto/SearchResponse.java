// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Search.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class SearchResponse extends Message {

  public static final String DEFAULT_ORIGINALQUERY = "";
  public static final String DEFAULT_SUGGESTEDQUERY = "";
  public static final Boolean DEFAULT_AGGREGATEQUERY = false;
  public static final List<Bucket> DEFAULT_BUCKET = Collections.emptyList();
  public static final List<DocV2> DEFAULT_DOC = Collections.emptyList();
  public static final List<RelatedSearch> DEFAULT_RELATEDSEARCH = Collections.emptyList();

  @ProtoField(tag = 1, type = STRING)
  public final String originalQuery;

  @ProtoField(tag = 2, type = STRING)
  public final String suggestedQuery;

  @ProtoField(tag = 3, type = BOOL)
  public final Boolean aggregateQuery;

  @ProtoField(tag = 4, label = REPEATED)
  public final List<Bucket> bucket;

  @ProtoField(tag = 5, label = REPEATED)
  public final List<DocV2> doc;

  @ProtoField(tag = 6, label = REPEATED)
  public final List<RelatedSearch> relatedSearch;

  public SearchResponse(String originalQuery, String suggestedQuery, Boolean aggregateQuery, List<Bucket> bucket, List<DocV2> doc, List<RelatedSearch> relatedSearch) {
    this.originalQuery = originalQuery;
    this.suggestedQuery = suggestedQuery;
    this.aggregateQuery = aggregateQuery;
    this.bucket = immutableCopyOf(bucket);
    this.doc = immutableCopyOf(doc);
    this.relatedSearch = immutableCopyOf(relatedSearch);
  }

  private SearchResponse(Builder builder) {
    this(builder.originalQuery, builder.suggestedQuery, builder.aggregateQuery, builder.bucket, builder.doc, builder.relatedSearch);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SearchResponse)) return false;
    SearchResponse o = (SearchResponse) other;
    return equals(originalQuery, o.originalQuery)
        && equals(suggestedQuery, o.suggestedQuery)
        && equals(aggregateQuery, o.aggregateQuery)
        && equals(bucket, o.bucket)
        && equals(doc, o.doc)
        && equals(relatedSearch, o.relatedSearch);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = originalQuery != null ? originalQuery.hashCode() : 0;
      result = result * 37 + (suggestedQuery != null ? suggestedQuery.hashCode() : 0);
      result = result * 37 + (aggregateQuery != null ? aggregateQuery.hashCode() : 0);
      result = result * 37 + (bucket != null ? bucket.hashCode() : 1);
      result = result * 37 + (doc != null ? doc.hashCode() : 1);
      result = result * 37 + (relatedSearch != null ? relatedSearch.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<SearchResponse> {

    public String originalQuery;
    public String suggestedQuery;
    public Boolean aggregateQuery;
    public List<Bucket> bucket;
    public List<DocV2> doc;
    public List<RelatedSearch> relatedSearch;

    public Builder() {
    }

    public Builder(SearchResponse message) {
      super(message);
      if (message == null) return;
      this.originalQuery = message.originalQuery;
      this.suggestedQuery = message.suggestedQuery;
      this.aggregateQuery = message.aggregateQuery;
      this.bucket = copyOf(message.bucket);
      this.doc = copyOf(message.doc);
      this.relatedSearch = copyOf(message.relatedSearch);
    }

    public Builder originalQuery(String originalQuery) {
      this.originalQuery = originalQuery;
      return this;
    }

    public Builder suggestedQuery(String suggestedQuery) {
      this.suggestedQuery = suggestedQuery;
      return this;
    }

    public Builder aggregateQuery(Boolean aggregateQuery) {
      this.aggregateQuery = aggregateQuery;
      return this;
    }

    public Builder bucket(List<Bucket> bucket) {
      this.bucket = checkForNulls(bucket);
      return this;
    }

    public Builder doc(List<DocV2> doc) {
      this.doc = checkForNulls(doc);
      return this;
    }

    public Builder relatedSearch(List<RelatedSearch> relatedSearch) {
      this.relatedSearch = checkForNulls(relatedSearch);
      return this;
    }

    @Override
    public SearchResponse build() {
      return new SearchResponse(this);
    }
  }
}
