// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Offers.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.DOUBLE;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class RuleEvaluation extends Message {

  public static final List<String> DEFAULT_ACTUALSTRINGVALUE = Collections.emptyList();
  public static final List<Long> DEFAULT_ACTUALLONGVALUE = Collections.emptyList();
  public static final List<Boolean> DEFAULT_ACTUALBOOLVALUE = Collections.emptyList();
  public static final List<Double> DEFAULT_ACTUALDOUBLEVALUE = Collections.emptyList();

  @ProtoField(tag = 1)
  public final Rule rule;

  @ProtoField(tag = 2, type = STRING, label = REPEATED)
  public final List<String> actualStringValue;

  @ProtoField(tag = 3, type = INT64, label = REPEATED)
  public final List<Long> actualLongValue;

  @ProtoField(tag = 4, type = BOOL, label = REPEATED)
  public final List<Boolean> actualBoolValue;

  @ProtoField(tag = 5, type = DOUBLE, label = REPEATED)
  public final List<Double> actualDoubleValue;

  public RuleEvaluation(Rule rule, List<String> actualStringValue, List<Long> actualLongValue, List<Boolean> actualBoolValue, List<Double> actualDoubleValue) {
    this.rule = rule;
    this.actualStringValue = immutableCopyOf(actualStringValue);
    this.actualLongValue = immutableCopyOf(actualLongValue);
    this.actualBoolValue = immutableCopyOf(actualBoolValue);
    this.actualDoubleValue = immutableCopyOf(actualDoubleValue);
  }

  private RuleEvaluation(Builder builder) {
    this(builder.rule, builder.actualStringValue, builder.actualLongValue, builder.actualBoolValue, builder.actualDoubleValue);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RuleEvaluation)) return false;
    RuleEvaluation o = (RuleEvaluation) other;
    return equals(rule, o.rule)
        && equals(actualStringValue, o.actualStringValue)
        && equals(actualLongValue, o.actualLongValue)
        && equals(actualBoolValue, o.actualBoolValue)
        && equals(actualDoubleValue, o.actualDoubleValue);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = rule != null ? rule.hashCode() : 0;
      result = result * 37 + (actualStringValue != null ? actualStringValue.hashCode() : 1);
      result = result * 37 + (actualLongValue != null ? actualLongValue.hashCode() : 1);
      result = result * 37 + (actualBoolValue != null ? actualBoolValue.hashCode() : 1);
      result = result * 37 + (actualDoubleValue != null ? actualDoubleValue.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<RuleEvaluation> {

    public Rule rule;
    public List<String> actualStringValue;
    public List<Long> actualLongValue;
    public List<Boolean> actualBoolValue;
    public List<Double> actualDoubleValue;

    public Builder() {
    }

    public Builder(RuleEvaluation message) {
      super(message);
      if (message == null) return;
      this.rule = message.rule;
      this.actualStringValue = copyOf(message.actualStringValue);
      this.actualLongValue = copyOf(message.actualLongValue);
      this.actualBoolValue = copyOf(message.actualBoolValue);
      this.actualDoubleValue = copyOf(message.actualDoubleValue);
    }

    public Builder rule(Rule rule) {
      this.rule = rule;
      return this;
    }

    public Builder actualStringValue(List<String> actualStringValue) {
      this.actualStringValue = checkForNulls(actualStringValue);
      return this;
    }

    public Builder actualLongValue(List<Long> actualLongValue) {
      this.actualLongValue = checkForNulls(actualLongValue);
      return this;
    }

    public Builder actualBoolValue(List<Boolean> actualBoolValue) {
      this.actualBoolValue = checkForNulls(actualBoolValue);
      return this;
    }

    public Builder actualDoubleValue(List<Double> actualDoubleValue) {
      this.actualDoubleValue = checkForNulls(actualDoubleValue);
      return this;
    }

    @Override
    public RuleEvaluation build() {
      return new RuleEvaluation(this);
    }
  }
}
