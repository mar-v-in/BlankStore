// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Purchase.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT32;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class CheckoutInfoProto extends Message {

  public static final List<LineItem> DEFAULT_SUBITEM = Collections.emptyList();
  public static final List<CheckoutOptionProto> DEFAULT_CHECKOUTOPTION = Collections.emptyList();
  public static final String DEFAULT_DEPRECATEDCHECKOUTURL = "";
  public static final String DEFAULT_ADDINSTRUMENTURL = "";
  public static final List<String> DEFAULT_FOOTERHTML = Collections.emptyList();
  public static final List<Integer> DEFAULT_ELIGIBLEINSTRUMENTFAMILY = Collections.emptyList();
  public static final List<String> DEFAULT_FOOTNOTEHTML = Collections.emptyList();
  public static final List<Instrument> DEFAULT_ELIGIBLEINSTRUMENT = Collections.emptyList();

  @ProtoField(tag = 3)
  public final LineItem item;

  @ProtoField(tag = 4, label = REPEATED)
  public final List<LineItem> subItem;

  @ProtoField(tag = 5, label = REPEATED)
  public final List<CheckoutOptionProto> checkoutOption;

  @ProtoField(tag = 10, type = STRING)
  public final String deprecatedCheckoutUrl;

  @ProtoField(tag = 11, type = STRING)
  public final String addInstrumentUrl;

  @ProtoField(tag = 20, type = STRING, label = REPEATED)
  public final List<String> footerHtml;

  @ProtoField(tag = 31, type = INT32, label = REPEATED)
  public final List<Integer> eligibleInstrumentFamily;

  @ProtoField(tag = 36, type = STRING, label = REPEATED)
  public final List<String> footnoteHtml;

  @ProtoField(tag = 44, label = REPEATED)
  public final List<Instrument> eligibleInstrument;

  public CheckoutInfoProto(LineItem item, List<LineItem> subItem, List<CheckoutOptionProto> checkoutOption, String deprecatedCheckoutUrl, String addInstrumentUrl, List<String> footerHtml, List<Integer> eligibleInstrumentFamily, List<String> footnoteHtml, List<Instrument> eligibleInstrument) {
    this.item = item;
    this.subItem = immutableCopyOf(subItem);
    this.checkoutOption = immutableCopyOf(checkoutOption);
    this.deprecatedCheckoutUrl = deprecatedCheckoutUrl;
    this.addInstrumentUrl = addInstrumentUrl;
    this.footerHtml = immutableCopyOf(footerHtml);
    this.eligibleInstrumentFamily = immutableCopyOf(eligibleInstrumentFamily);
    this.footnoteHtml = immutableCopyOf(footnoteHtml);
    this.eligibleInstrument = immutableCopyOf(eligibleInstrument);
  }

  private CheckoutInfoProto(Builder builder) {
    this(builder.item, builder.subItem, builder.checkoutOption, builder.deprecatedCheckoutUrl, builder.addInstrumentUrl, builder.footerHtml, builder.eligibleInstrumentFamily, builder.footnoteHtml, builder.eligibleInstrument);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CheckoutInfoProto)) return false;
    CheckoutInfoProto o = (CheckoutInfoProto) other;
    return equals(item, o.item)
        && equals(subItem, o.subItem)
        && equals(checkoutOption, o.checkoutOption)
        && equals(deprecatedCheckoutUrl, o.deprecatedCheckoutUrl)
        && equals(addInstrumentUrl, o.addInstrumentUrl)
        && equals(footerHtml, o.footerHtml)
        && equals(eligibleInstrumentFamily, o.eligibleInstrumentFamily)
        && equals(footnoteHtml, o.footnoteHtml)
        && equals(eligibleInstrument, o.eligibleInstrument);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = item != null ? item.hashCode() : 0;
      result = result * 37 + (subItem != null ? subItem.hashCode() : 1);
      result = result * 37 + (checkoutOption != null ? checkoutOption.hashCode() : 1);
      result = result * 37 + (deprecatedCheckoutUrl != null ? deprecatedCheckoutUrl.hashCode() : 0);
      result = result * 37 + (addInstrumentUrl != null ? addInstrumentUrl.hashCode() : 0);
      result = result * 37 + (footerHtml != null ? footerHtml.hashCode() : 1);
      result = result * 37 + (eligibleInstrumentFamily != null ? eligibleInstrumentFamily.hashCode() : 1);
      result = result * 37 + (footnoteHtml != null ? footnoteHtml.hashCode() : 1);
      result = result * 37 + (eligibleInstrument != null ? eligibleInstrument.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<CheckoutInfoProto> {

    public LineItem item;
    public List<LineItem> subItem;
    public List<CheckoutOptionProto> checkoutOption;
    public String deprecatedCheckoutUrl;
    public String addInstrumentUrl;
    public List<String> footerHtml;
    public List<Integer> eligibleInstrumentFamily;
    public List<String> footnoteHtml;
    public List<Instrument> eligibleInstrument;

    public Builder() {
    }

    public Builder(CheckoutInfoProto message) {
      super(message);
      if (message == null) return;
      this.item = message.item;
      this.subItem = copyOf(message.subItem);
      this.checkoutOption = copyOf(message.checkoutOption);
      this.deprecatedCheckoutUrl = message.deprecatedCheckoutUrl;
      this.addInstrumentUrl = message.addInstrumentUrl;
      this.footerHtml = copyOf(message.footerHtml);
      this.eligibleInstrumentFamily = copyOf(message.eligibleInstrumentFamily);
      this.footnoteHtml = copyOf(message.footnoteHtml);
      this.eligibleInstrument = copyOf(message.eligibleInstrument);
    }

    public Builder item(LineItem item) {
      this.item = item;
      return this;
    }

    public Builder subItem(List<LineItem> subItem) {
      this.subItem = checkForNulls(subItem);
      return this;
    }

    public Builder checkoutOption(List<CheckoutOptionProto> checkoutOption) {
      this.checkoutOption = checkForNulls(checkoutOption);
      return this;
    }

    public Builder deprecatedCheckoutUrl(String deprecatedCheckoutUrl) {
      this.deprecatedCheckoutUrl = deprecatedCheckoutUrl;
      return this;
    }

    public Builder addInstrumentUrl(String addInstrumentUrl) {
      this.addInstrumentUrl = addInstrumentUrl;
      return this;
    }

    public Builder footerHtml(List<String> footerHtml) {
      this.footerHtml = checkForNulls(footerHtml);
      return this;
    }

    public Builder eligibleInstrumentFamily(List<Integer> eligibleInstrumentFamily) {
      this.eligibleInstrumentFamily = checkForNulls(eligibleInstrumentFamily);
      return this;
    }

    public Builder footnoteHtml(List<String> footnoteHtml) {
      this.footnoteHtml = checkForNulls(footnoteHtml);
      return this;
    }

    public Builder eligibleInstrument(List<Instrument> eligibleInstrument) {
      this.eligibleInstrument = checkForNulls(eligibleInstrument);
      return this;
    }

    @Override
    public CheckoutInfoProto build() {
      return new CheckoutInfoProto(this);
    }
  }
}
