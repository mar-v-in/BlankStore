// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Carrier.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;

public final class CarrierBillingInstrument extends Message {

  public static final String DEFAULT_INSTRUMENTKEY = "";
  public static final String DEFAULT_ACCOUNTTYPE = "";
  public static final String DEFAULT_CURRENCYCODE = "";
  public static final Long DEFAULT_TRANSACTIONLIMIT = 0L;
  public static final String DEFAULT_SUBSCRIBERIDENTIFIER = "";

  @ProtoField(tag = 1, type = STRING)
  public final String instrumentKey;

  @ProtoField(tag = 2, type = STRING)
  public final String accountType;

  @ProtoField(tag = 3, type = STRING)
  public final String currencyCode;

  @ProtoField(tag = 4, type = INT64)
  public final Long transactionLimit;

  @ProtoField(tag = 5, type = STRING)
  public final String subscriberIdentifier;

  @ProtoField(tag = 6)
  public final EncryptedSubscriberInfo encryptedSubscriberInfo;

  @ProtoField(tag = 7)
  public final CarrierBillingCredentials credentials;

  @ProtoField(tag = 8)
  public final CarrierTos acceptedCarrierTos;

  public CarrierBillingInstrument(String instrumentKey, String accountType, String currencyCode, Long transactionLimit, String subscriberIdentifier, EncryptedSubscriberInfo encryptedSubscriberInfo, CarrierBillingCredentials credentials, CarrierTos acceptedCarrierTos) {
    this.instrumentKey = instrumentKey;
    this.accountType = accountType;
    this.currencyCode = currencyCode;
    this.transactionLimit = transactionLimit;
    this.subscriberIdentifier = subscriberIdentifier;
    this.encryptedSubscriberInfo = encryptedSubscriberInfo;
    this.credentials = credentials;
    this.acceptedCarrierTos = acceptedCarrierTos;
  }

  private CarrierBillingInstrument(Builder builder) {
    this(builder.instrumentKey, builder.accountType, builder.currencyCode, builder.transactionLimit, builder.subscriberIdentifier, builder.encryptedSubscriberInfo, builder.credentials, builder.acceptedCarrierTos);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CarrierBillingInstrument)) return false;
    CarrierBillingInstrument o = (CarrierBillingInstrument) other;
    return equals(instrumentKey, o.instrumentKey)
        && equals(accountType, o.accountType)
        && equals(currencyCode, o.currencyCode)
        && equals(transactionLimit, o.transactionLimit)
        && equals(subscriberIdentifier, o.subscriberIdentifier)
        && equals(encryptedSubscriberInfo, o.encryptedSubscriberInfo)
        && equals(credentials, o.credentials)
        && equals(acceptedCarrierTos, o.acceptedCarrierTos);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = instrumentKey != null ? instrumentKey.hashCode() : 0;
      result = result * 37 + (accountType != null ? accountType.hashCode() : 0);
      result = result * 37 + (currencyCode != null ? currencyCode.hashCode() : 0);
      result = result * 37 + (transactionLimit != null ? transactionLimit.hashCode() : 0);
      result = result * 37 + (subscriberIdentifier != null ? subscriberIdentifier.hashCode() : 0);
      result = result * 37 + (encryptedSubscriberInfo != null ? encryptedSubscriberInfo.hashCode() : 0);
      result = result * 37 + (credentials != null ? credentials.hashCode() : 0);
      result = result * 37 + (acceptedCarrierTos != null ? acceptedCarrierTos.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<CarrierBillingInstrument> {

    public String instrumentKey;
    public String accountType;
    public String currencyCode;
    public Long transactionLimit;
    public String subscriberIdentifier;
    public EncryptedSubscriberInfo encryptedSubscriberInfo;
    public CarrierBillingCredentials credentials;
    public CarrierTos acceptedCarrierTos;

    public Builder() {
    }

    public Builder(CarrierBillingInstrument message) {
      super(message);
      if (message == null) return;
      this.instrumentKey = message.instrumentKey;
      this.accountType = message.accountType;
      this.currencyCode = message.currencyCode;
      this.transactionLimit = message.transactionLimit;
      this.subscriberIdentifier = message.subscriberIdentifier;
      this.encryptedSubscriberInfo = message.encryptedSubscriberInfo;
      this.credentials = message.credentials;
      this.acceptedCarrierTos = message.acceptedCarrierTos;
    }

    public Builder instrumentKey(String instrumentKey) {
      this.instrumentKey = instrumentKey;
      return this;
    }

    public Builder accountType(String accountType) {
      this.accountType = accountType;
      return this;
    }

    public Builder currencyCode(String currencyCode) {
      this.currencyCode = currencyCode;
      return this;
    }

    public Builder transactionLimit(Long transactionLimit) {
      this.transactionLimit = transactionLimit;
      return this;
    }

    public Builder subscriberIdentifier(String subscriberIdentifier) {
      this.subscriberIdentifier = subscriberIdentifier;
      return this;
    }

    public Builder encryptedSubscriberInfo(EncryptedSubscriberInfo encryptedSubscriberInfo) {
      this.encryptedSubscriberInfo = encryptedSubscriberInfo;
      return this;
    }

    public Builder credentials(CarrierBillingCredentials credentials) {
      this.credentials = credentials;
      return this;
    }

    public Builder acceptedCarrierTos(CarrierTos acceptedCarrierTos) {
      this.acceptedCarrierTos = acceptedCarrierTos;
      return this;
    }

    @Override
    public CarrierBillingInstrument build() {
      return new CarrierBillingInstrument(this);
    }
  }
}
