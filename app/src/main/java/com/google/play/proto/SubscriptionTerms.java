// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Offers.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

public final class SubscriptionTerms extends Message {

  @ProtoField(tag = 1)
  public final TimePeriod recurringPeriod;

  @ProtoField(tag = 2)
  public final TimePeriod trialPeriod;

  public SubscriptionTerms(TimePeriod recurringPeriod, TimePeriod trialPeriod) {
    this.recurringPeriod = recurringPeriod;
    this.trialPeriod = trialPeriod;
  }

  private SubscriptionTerms(Builder builder) {
    this(builder.recurringPeriod, builder.trialPeriod);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SubscriptionTerms)) return false;
    SubscriptionTerms o = (SubscriptionTerms) other;
    return equals(recurringPeriod, o.recurringPeriod)
        && equals(trialPeriod, o.trialPeriod);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = recurringPeriod != null ? recurringPeriod.hashCode() : 0;
      result = result * 37 + (trialPeriod != null ? trialPeriod.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<SubscriptionTerms> {

    public TimePeriod recurringPeriod;
    public TimePeriod trialPeriod;

    public Builder() {
    }

    public Builder(SubscriptionTerms message) {
      super(message);
      if (message == null) return;
      this.recurringPeriod = message.recurringPeriod;
      this.trialPeriod = message.trialPeriod;
    }

    public Builder recurringPeriod(TimePeriod recurringPeriod) {
      this.recurringPeriod = recurringPeriod;
      return this;
    }

    public Builder trialPeriod(TimePeriod trialPeriod) {
      this.trialPeriod = trialPeriod;
      return this;
    }

    @Override
    public SubscriptionTerms build() {
      return new SubscriptionTerms(this);
    }
  }
}
