// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/Debug.proto
package com.google.play.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class DebugInfo extends Message {

  public static final List<String> DEFAULT_MESSAGE = Collections.emptyList();
  public static final List<TimingProto> DEFAULT_TIMING = Collections.emptyList();

  @ProtoField(tag = 1, type = STRING, label = REPEATED)
  public final List<String> message;

  @ProtoField(tag = 2, label = REPEATED)
  public final List<TimingProto> timing;

  public DebugInfo(List<String> message, List<TimingProto> timing) {
    this.message = immutableCopyOf(message);
    this.timing = immutableCopyOf(timing);
  }

  private DebugInfo(Builder builder) {
    this(builder.message, builder.timing);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DebugInfo)) return false;
    DebugInfo o = (DebugInfo) other;
    return equals(message, o.message)
        && equals(timing, o.timing);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = message != null ? message.hashCode() : 1;
      result = result * 37 + (timing != null ? timing.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<DebugInfo> {

    public List<String> message;
    public List<TimingProto> timing;

    public Builder() {
    }

    public Builder(DebugInfo message) {
      super(message);
      if (message == null) return;
      this.message = copyOf(message.message);
      this.timing = copyOf(message.timing);
    }

    public Builder message(List<String> message) {
      this.message = checkForNulls(message);
      return this;
    }

    public Builder timing(List<TimingProto> timing) {
      this.timing = checkForNulls(timing);
      return this;
    }

    @Override
    public DebugInfo build() {
      return new DebugInfo(this);
    }
  }
}
